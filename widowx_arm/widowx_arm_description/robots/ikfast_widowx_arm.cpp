/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-06-08 21:17:17.045047
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKcos(j[2]);
x3=IKcos(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[0]);
x6=IKsin(j[3]);
x7=IKcos(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=((1.0)*x0);
x11=((0.11)*x4);
x12=((0.11)*x2);
x13=((0.14203)*x1);
x14=((1.0)*x7);
x15=((2.0e-7)*x2);
x16=((1.0)*x4);
x17=((1.0)*x2);
x18=((0.14203)*x2);
x19=((1.0)*x6);
x20=(x0*x3);
x21=(x3*x4);
x22=(x1*x5);
x23=(x1*x2);
x24=(x3*x5);
x25=(x1*x4);
x26=(x0*x1);
IkReal x27=(x0*x13);
IkReal x28=((1.0)*x26);
eetrans[0]=(((x18*x20))+((x7*((((x12*x20))+(((-1.0)*x11*x28))))))+(((0.04825)*x20))+(((2.0e-7)*x20*x4))+x27+((x6*(((((-1.0)*x11*x20))+(((-1.0)*x12*x28))))))+(((-1.0)*x27*x4))+((x15*x26)));
IkReal x29=((1.0)*x11);
IkReal x30=(x13*x5);
eetrans[1]=((((2.0e-7)*x21*x5))+((x18*x24))+(((0.04825)*x24))+x30+((x6*(((((-1.0)*x12*x22))+(((-1.0)*x24*x29))))))+((x15*x22))+((x7*(((((-1.0)*x22*x29))+((x12*x24))))))+(((-1.0)*x30*x4)));
IkReal x31=((1.0)*x3);
eetrans[2]=((0.125)+(((0.14203)*x3))+(((-2.0e-7)*x25))+(((-0.14203)*x21))+((x7*(((((-1.0)*x1*x12))+(((-1.0)*x11*x31))))))+((x6*((((x1*x11))+(((-1.0)*x12*x31))))))+(((-0.04825)*x1))+(((-1.0)*x13*x2))+((x15*x3)));
eerot[0]=((((-1.0)*x8*((((x19*((((x10*x23))+((x10*x21))))))+((x14*((((x0*x25))+(((-1.0)*x10*x2*x3))))))))))+((x5*x9)));
eerot[1]=((((-1.0)*x8*((((x14*((((x22*x4))+(((-1.0)*x17*x24))))))+((x19*((((x16*x24))+((x17*x22))))))))))+(((-1.0)*x10*x9)));
eerot[2]=((-1.0)*x8*((((x14*((x21+x23))))+((x19*(((((-1.0)*x1*x16))+((x17*x3)))))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=r01;
new_py=py;
new_r02=r02;
new_pz=((-0.125)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x33 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x33.valid){
continue;
}
IkReal x32=x33.value;
j0array[0]=((-1.0)*x32);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x32)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IkReal op[4+1], zeror[4];
int numroots;
op[0]=((((-0.01954387499992)*(cj0*cj0)*(py*py)*(r00*r00)))+(((-0.10954620859992)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.000663365318)*r01*r02*sj0))+(((-1.0)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.56812)*r01*r02*(py*py*py)*(sj0*sj0)))+(((-1.70436)*cj0*px*r01*r02*sj0*(py*py)))+(((0.56812)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((-0.0163937417349546)*cj0*pz*r00*r01*sj0))+(((-0.12229241719984)*py*pz*r01*r02))+(((-4.0)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((-12.0)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((-4.0)*(px*px)*(pz*pz)*(r00*r00)))+(((-0.193)*cj0*px*(pz*pz)*(r02*r02)))+(((0.56812)*pz*(py*py)*(r02*r02)))+(((0.56812)*cj0*r00*r02*sj0*(py*py*py)))+(((0.21909241719984)*cj0*py*pz*r00*r02*sj0))+(((-0.05482358)*cj0*px*pz*(r00*r00)))+(((0.386)*pz*r01*r02*sj0*(px*px)))+(((0.21909241719984)*px*pz*r00*r02*(cj0*cj0)))+(((-0.579)*px*r00*r01*sj0*(py*py)))+(((-0.05482358)*py*pz*sj0*(r02*r02)))+(((-12.0)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((-0.193)*cj0*py*r00*r01*(pz*pz)))+(((2.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((4.0)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((-0.05482358)*cj0*py*pz*r00*r01))+(((-0.05482358)*px*pz*r00*r01*sj0))+(((4.0)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((4.0)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((1.70436)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((4.0)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((-8.0)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((0.00819687086747728)*cj0*py*r00*r02*sj0))+(((-9.5490762502752e-5)*(r01*r01)*(sj0*sj0)))+(((0.00819687086747728)*py*r01*r02*(sj0*sj0)))+(((4.0)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((0.386)*cj0*pz*r00*r02*(py*py)))+(((-0.193)*px*r00*r01*sj0*(pz*pz)))+(((-2.0)*(px*px)*(py*py)*(r02*r02)))+(((-8.0)*px*py*r00*r01*(pz*pz)))+(((-0.193)*cj0*(px*px*px)*(r02*r02)))+(((0.56812)*r01*r02*(py*py*py)))+(((0.00188598393750772)*py*sj0*(r01*r01)))+(((-1.13624)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((0.56812)*cj0*r01*r02*sj0*(px*px*px)))+(((-0.00819687086747728)*pz*(cj0*cj0)*(r00*r00)))+(((4.0)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((0.193)*cj0*px*(py*py)*(r00*r00)))+(((4.0)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((4.0)*pz*r01*r02*(py*py*py)))+(((-0.00931224999984)*(py*py)*(r01*r01)))+(((-1.0)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((-1.13624)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((-0.05482358)*cj0*px*pz*(r02*r02)))+(((-4.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((-0.000190981525005504)*cj0*r00*r01*sj0))+(((0.21909241719984)*py*pz*r01*r02*(sj0*sj0)))+(((0.01954387499992)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-2.0)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-4.0)*py*r01*r02*(pz*pz*pz)))+(((0.00555163313252272)*py*r01*r02))+(((-0.00819687086747728)*pz*(r01*r01)*(sj0*sj0)))+(((-2.27248)*px*py*pz*r00*r01))+(((1.13624)*cj0*px*py*pz*sj0*(r01*r01)))+(((-0.386)*cj0*px*py*pz*r01*r02))+(((2.0)*cj0*r00*r01*sj0*(py*py*py*py)))+(((0.56812)*py*r01*r02*(px*px)*(sj0*sj0)))+(((0.00819687086747728)*cj0*px*r01*r02*sj0))+(((-1.70436)*px*r00*r02*(pz*pz)))+(((-1.0)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((2.0)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((-1.0)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((4.0)*py*pz*r01*r02*(px*px)))+(((-0.1800046672)*cj0*px*py*sj0*(r02*r02)))+(((-0.12229241719984)*px*pz*r00*r02))+(((-0.56812)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((1.13624)*cj0*px*py*pz*sj0*(r00*r00)))+(((-1.70436)*py*r01*r02*(pz*pz)))+(((0.193)*py*sj0*(px*px)*(r01*r01)))+(((4.0)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((-0.05482358)*px*py*r00*r02*sj0))+(((-0.05482358)*py*pz*sj0*(r01*r01)))+(((-0.21909241719984)*cj0*r00*r01*sj0*(pz*pz)))+(((0.000768181024057248)*(r02*r02)))+(((4.0)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((0.56812)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((4.0)*pz*r00*r02*(px*px*px)))+(((-8.0)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((-2.0)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((0.0046706)*pz*r01*r02*sj0))+(((0.00555163313252272)*pz*(r02*r02)))+(((-0.193)*cj0*px*(pz*pz)*(r00*r00)))+(((-0.06114620859992)*(pz*pz)*(r02*r02)))+(((-4.0)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((0.56812)*py*r01*r02*(px*px)))+(((-4.0)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((0.03908774999984)*cj0*px*py*sj0*(r00*r00)))+(((-0.00931224999984)*(px*px)*(r00*r00)))+(((-0.00278461606249228)*py*sj0*(r02*r02)))+(((0.03908774999984)*px*py*r00*r01*(sj0*sj0)))+(((-1.0)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((-0.56812)*pz*(cj0*cj0)*(py*py)*(r00*r00)))+(((-1.13624)*px*r00*r02*(py*py)*(sj0*sj0)))+(((0.01954387499992)*(cj0*cj0)*(px*px)*(r00*r00)))+(((0.00555163313252272)*px*r00*r02))+(((1.13624)*px*py*pz*r00*r01*(sj0*sj0)))+(((-8.0)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((0.03908774999984)*cj0*px*py*sj0*(r01*r01)))+(((0.00819687086747728)*px*r00*r02*(cj0*cj0)))+(((0.03908774999984)*px*py*r00*r01*(cj0*cj0)))+(((0.56812)*px*r00*r02*(cj0*cj0)*(py*py)))+(((2.0)*(px*px)*(pz*pz)*(r02*r02)))+(((-4.0)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((-1.13624)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((-0.193)*cj0*px*(py*py)*(r02*r02)))+(((-0.386)*px*py*pz*r00*r02*sj0))+(((-0.386)*cj0*px*(py*py)*(r01*r01)))+(((0.000663365318)*cj0*r00*r02))+(((-1.0)*(py*py*py*py)*(r02*r02)))+(((-0.193)*cj0*(px*px*px)*(r00*r00)))+(((-0.579)*cj0*py*r00*r01*(px*px)))+(((-0.56812)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((2.0)*cj0*r00*r01*sj0*(px*px*px*px)))+(((-0.56812)*r00*r02*(cj0*cj0)*(px*px*px)))+(((-2.0)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((0.56812)*px*r00*r02*(py*py)))+(((-0.193)*py*sj0*(pz*pz)*(r02*r02)))+(((-0.386)*py*sj0*(px*px)*(r00*r00)))+(((-4.0)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((-4.0)*(py*py)*(pz*pz)*(r01*r01)))+(((-1.0)*(pz*pz*pz*pz)*(r02*r02)))+(((0.56812)*pz*(px*px)*(r02*r02)))+(((-0.01954387499992)*(px*px)*(r01*r01)*(sj0*sj0)))+(((4.0)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((-4.0)*px*r00*r02*(pz*pz*pz)))+(((1.70436)*cj0*px*r01*r02*sj0*(pz*pz)))+(((0.56812)*r00*r02*(px*px*px)))+(((0.00188598393750772)*cj0*py*r00*r01))+(((-1.0)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((0.05482358)*cj0*r00*r02*(py*py)))+(((0.05183395860008)*(py*py)*(r02*r02)))+(((4.0)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((-1.13624)*pz*(px*px)*(r00*r00)))+(((4.0)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((-0.00278461606249228)*cj0*px*(r02*r02)))+(((4.0)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((0.21909241719984)*cj0*px*pz*r01*r02*sj0))+(((0.00188598393750772)*px*r00*r01*sj0))+(((0.193)*cj0*r00*r01*(py*py*py)))+(((-1.70436)*cj0*py*r00*r02*sj0*(px*px)))+(((4.0)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((-9.5490762502752e-5)*(cj0*cj0)*(r00*r00)))+(((-2.27248)*cj0*px*py*pz*sj0*(r02*r02)))+(((1.70436)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((-0.0900023336)*(cj0*cj0)*(px*px)*(r02*r02)))+(((-0.193)*py*sj0*(px*px)*(r02*r02)))+(((4.0)*px*pz*r00*r02*(py*py)))+(((2.0)*(py*py)*(pz*pz)*(r02*r02)))+(((-0.56812)*(pz*pz*pz)*(r02*r02)))+(((1.13624)*px*py*pz*r00*r01*(cj0*cj0)))+(((-0.05482358)*cj0*px*py*r01*r02))+(((-1.13624)*py*r01*r02*(cj0*cj0)*(px*px)))+(((2.0)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-4.0)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((0.193)*r00*r01*sj0*(px*px*px)))+(((-4.0)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((-0.56812)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-4.0)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-12.0)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((1.70436)*cj0*py*r00*r02*sj0*(pz*pz)))+(((-0.01862449999968)*px*py*r00*r01))+(((-0.193)*sj0*(py*py*py)*(r02*r02)))+(((2.0)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-4.0)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((4.0)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((0.05482358)*r01*r02*sj0*(px*px)))+(((0.05183395860008)*(px*px)*(r02*r02)))+(((-0.193)*py*sj0*(pz*pz)*(r01*r01)))+(((-1.0)*(px*px*px*px)*(r02*r02)))+(((-1.13624)*pz*(py*py)*(r01*r01)))+(((-0.0900023336)*(py*py)*(r02*r02)*(sj0*sj0)))+(((0.00188598393750772)*cj0*px*(r00*r00)))+(((4.0)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((0.0046706)*cj0*pz*r00*r02))+(((-0.193)*sj0*(py*py*py)*(r01*r01)))+(((-0.10954620859992)*(cj0*cj0)*(pz*pz)*(r00*r00))));
op[1]=((((-0.386)*r01*r02*(py*py*py)*(sj0*sj0)))+(((0.21929432)*px*py*r00*r01*(sj0*sj0)))+(((0.21929432)*px*pz*r00*r02*(cj0*cj0)))+(((-0.00345468714624)*cj0*r00*r02))+(((0.00377196787501544)*px*r00*r02))+(((0.00377196787501544)*pz*(r02*r02)))+(((2.27248)*px*py*pz*r00*r02*sj0))+(((0.21929432)*cj0*px*py*sj0*(r00*r00)))+(((-2.27248)*pz*r01*r02*sj0*(px*px)))+(((-0.10964716)*(cj0*cj0)*(py*py)*(r00*r00)))+(((-0.00345468714624)*r01*r02*sj0))+(((-0.21929432)*py*pz*r01*r02))+(((-0.002653461272)*cj0*r00*r01*sj0))+(((-0.00556923212498456)*pz*(r01*r01)*(sj0*sj0)))+(((1.13624)*cj0*(px*px*px)*(r00*r00)))+(((0.2855113344)*cj0*py*pz*r00*r01))+(((0.386)*pz*(py*py)*(r02*r02)))+(((-0.027497008)*pz*r01*r02*sj0))+(((-1.13624)*py*sj0*(px*px)*(r01*r01)))+(((1.13624)*cj0*(px*px*px)*(r02*r02)))+(((0.2855113344)*py*pz*sj0*(r02*r02)))+(((-1.158)*px*r00*r02*(pz*pz)))+(((1.158)*cj0*py*r00*r02*sj0*(pz*pz)))+(((-1.158)*cj0*px*r01*r02*sj0*(py*py)))+(((-0.386)*pz*(cj0*cj0)*(py*py)*(r00*r00)))+(((-0.386)*(pz*pz*pz)*(r02*r02)))+(((1.13624)*py*sj0*(px*px)*(r02*r02)))+(((-2.27248)*cj0*pz*r00*r02*(py*py)))+(((-0.027497008)*cj0*pz*r00*r02))+(((-1.544)*cj0*px*py*pz*sj0*(r02*r02)))+(((2.27248)*cj0*px*(py*py)*(r01*r01)))+(((-0.386)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.386)*cj0*r00*r02*sj0*(py*py*py)))+(((0.386)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((0.00556923212498456)*px*r00*r02*(cj0*cj0)))+(((1.13624)*py*sj0*(pz*pz)*(r02*r02)))+(((-0.772)*pz*(py*py)*(r01*r01)))+(((0.386)*r00*r02*(px*px*px)))+(((0.0163937417349546)*py*sj0*(r02*r02)))+(((1.13624)*py*sj0*(pz*pz)*(r01*r01)))+(((-0.386)*r00*r02*(cj0*cj0)*(px*px*px)))+(((0.21929432)*cj0*py*pz*r00*r02*sj0))+(((1.13624)*sj0*(py*py*py)*(r01*r01)))+(((0.386)*cj0*r01*r02*sj0*(px*px*px)))+(((-0.772)*px*r00*r02*(py*py)*(sj0*sj0)))+(((-0.0111032662650454)*px*r00*r01*sj0))+(((0.00556923212498456)*py*r01*r02*(sj0*sj0)))+(((1.13624)*cj0*py*r00*r01*(pz*pz)))+(((-1.13624)*cj0*r00*r01*(py*py*py)))+(((-0.772)*py*r01*r02*(cj0*cj0)*(px*px)))+(((0.21929432)*cj0*px*pz*r01*r02*sj0))+(((0.386)*py*r01*r02*(px*px)*(sj0*sj0)))+(((-0.772)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((0.772)*px*py*pz*r00*r01*(sj0*sj0)))+(((-0.0111032662650454)*py*sj0*(r01*r01)))+(((-1.13624)*r00*r01*sj0*(px*px*px)))+(((0.001326730636)*(r02*r02)))+(((-0.0111032662650454)*cj0*py*r00*r01))+(((0.10964716)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-0.10964716)*(px*px)*(r01*r01)*(sj0*sj0)))+(((1.158)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((-0.00556923212498456)*pz*(cj0*cj0)*(r00*r00)))+(((1.13624)*px*r00*r01*sj0*(pz*pz)))+(((0.2855113344)*cj0*px*pz*(r02*r02)))+(((-0.386)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((-0.0111032662650454)*cj0*px*(r00*r00)))+(((-1.13624)*cj0*px*(py*py)*(r00*r00)))+(((-1.544)*px*py*pz*r00*r01))+(((0.386)*px*r00*r02*(cj0*cj0)*(py*py)))+(((-0.772)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((0.00556923212498456)*cj0*py*r00*r02*sj0))+(((-0.10964716)*(pz*pz)*(r02*r02)))+(((3.40872)*px*r00*r01*sj0*(py*py)))+(((-0.001326730636)*(cj0*cj0)*(r00*r00)))+(((2.27248)*py*sj0*(px*px)*(r00*r00)))+(((-0.001326730636)*(r01*r01)*(sj0*sj0)))+(((1.158)*cj0*px*r01*r02*sj0*(pz*pz)))+(((-0.2855113344)*r01*r02*sj0*(px*px)))+(((-0.386)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((0.386)*py*r01*r02*(px*px)))+(((0.772)*cj0*px*py*pz*sj0*(r00*r00)))+(((0.772)*px*py*pz*r00*r01*(cj0*cj0)))+(((0.10964716)*(px*px)*(r02*r02)))+(((0.21929432)*py*pz*r01*r02*(sj0*sj0)))+(((-0.10964716)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((1.13624)*cj0*px*(py*py)*(r02*r02)))+(((-0.2855113344)*cj0*r00*r02*(py*py)))+(((0.386)*r01*r02*(py*py*py)))+(((-0.772)*pz*(px*px)*(r00*r00)))+(((0.386)*px*r00*r02*(py*py)))+(((-0.0111384642499691)*cj0*pz*r00*r01*sj0))+(((2.27248)*cj0*px*py*pz*r01*r02))+(((-0.21929432)*px*pz*r00*r02))+(((1.13624)*cj0*px*(pz*pz)*(r00*r00)))+(((-0.10964716)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((1.13624)*sj0*(py*py*py)*(r02*r02)))+(((0.2855113344)*cj0*px*pz*(r00*r00)))+(((-1.158)*py*r01*r02*(pz*pz)))+(((3.40872)*cj0*py*r00*r01*(px*px)))+(((0.21929432)*cj0*px*py*sj0*(r01*r01)))+(((-1.158)*cj0*py*r00*r02*sj0*(px*px)))+(((0.2855113344)*py*pz*sj0*(r01*r01)))+(((0.386)*pz*(px*px)*(r02*r02)))+(((0.2855113344)*px*pz*r00*r01*sj0))+(((0.2855113344)*px*py*r00*r02*sj0))+(((0.10964716)*(cj0*cj0)*(px*px)*(r00*r00)))+(((0.00377196787501544)*py*r01*r02))+(((-0.21929432)*cj0*r00*r01*sj0*(pz*pz)))+(((1.13624)*cj0*px*(pz*pz)*(r02*r02)))+(((0.386)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((1.158)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((0.10964716)*(py*py)*(r02*r02)))+(((0.21929432)*px*py*r00*r01*(cj0*cj0)))+(((0.0163937417349546)*cj0*px*(r02*r02)))+(((-0.772)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((0.2855113344)*cj0*px*py*r01*r02))+(((0.00556923212498456)*cj0*px*r01*r02*sj0))+(((0.772)*cj0*px*py*pz*sj0*(r01*r01))));
op[2]=((((-0.24642358440016)*(cj0*cj0)*(px*px)*(r00*r00)))+(((8.0)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((-24.0)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((-8.0)*px*r00*r02*(pz*pz*pz)))+(((8.0)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((-0.13283783440032)*cj0*px*pz*r01*r02*sj0))+(((0.24642358440016)*(px*px)*(r01*r01)*(sj0*sj0)))+(((-24.0)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((8.0)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((-0.49284716880032)*px*py*r00*r01*(cj0*cj0)))+(((8.0)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((-2.0)*(px*px*px*px)*(r02*r02)))+(((-0.13283783440032)*py*pz*r01*r02*(sj0*sj0)))+(((-2.0)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-2.0)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((0.32894148)*cj0*py*pz*r00*r01))+(((-4.0)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((0.32643783440032)*px*pz*r00*r02))+(((4.0)*(px*px)*(pz*pz)*(r02*r02)))+(((8.0)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((-0.32894148)*cj0*r00*r02*(py*py)))+(((0.32894148)*cj0*px*pz*(r02*r02)))+(((-24.0)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((-8.0)*(px*px)*(pz*pz)*(r00*r00)))+(((-4.0)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((-0.49284716880032)*cj0*px*py*sj0*(r00*r00)))+(((-0.24642358440016)*(py*py)*(r01*r01)*(sj0*sj0)))+(((0.16321891720016)*(pz*pz)*(r02*r02)))+(((8.0)*pz*r01*r02*(py*py*py)))+(((8.0)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((-0.49284716880032)*px*py*r00*r01*(sj0*sj0)))+(((-0.03724899999936)*px*py*r00*r01))+(((-8.0)*py*r01*r02*(pz*pz*pz)))+(((0.32894148)*px*py*r00*r02*sj0))+(((-2.0)*(pz*pz*pz*pz)*(r02*r02)))+(((0.0032637056212345)*(cj0*cj0)*(r00*r00)))+(((-8.0)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((8.0)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((-2.0)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((-8.0)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((-0.003980191908)*r01*r02*sj0))+(((-2.0)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((-8.0)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-0.01862449999968)*(px*px)*(r00*r00)))+(((-8.0)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((0.24642358440016)*(cj0*cj0)*(py*py)*(r00*r00)))+(((0.32894148)*cj0*px*pz*(r00*r00)))+(((-0.32894148)*r01*r02*sj0*(px*px)))+(((0.13283783440032)*cj0*r00*r01*sj0*(pz*pz)))+(((-4.0)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-16.0)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((-2.0)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((-4.0)*(px*px)*(py*py)*(r02*r02)))+(((-0.13283783440032)*px*pz*r00*r02*(cj0*cj0)))+(((-0.0019183250981255)*(r02*r02)))+(((-0.18184341719984)*(py*py)*(r02*r02)))+(((8.0)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((4.0)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((8.0)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((4.0)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((8.0)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((-0.18184341719984)*(px*px)*(r02*r02)))+(((-0.01862449999968)*(py*py)*(r01*r01)))+(((0.32894148)*cj0*px*py*r01*r02))+(((-8.0)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((-0.49284716880032)*cj0*px*py*sj0*(r01*r01)))+(((-2.0)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((-8.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((0.32894148)*py*pz*sj0*(r01*r01)))+(((-0.003980191908)*cj0*r00*r02))+(((-0.1800046672)*(cj0*cj0)*(px*px)*(r02*r02)))+(((8.0)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((4.0)*cj0*r00*r01*sj0*(px*px*px*px)))+(((-0.1800046672)*(py*py)*(r02*r02)*(sj0*sj0)))+(((4.0)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((-16.0)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((8.0)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((8.0)*py*pz*r01*r02*(px*px)))+(((0.06641891720016)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((0.06641891720016)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-16.0)*px*py*r00*r01*(pz*pz)))+(((0.32643783440032)*py*pz*r01*r02))+(((0.00652741124246899)*cj0*r00*r01*sj0))+(((-2.0)*(py*py*py*py)*(r02*r02)))+(((4.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((4.0)*cj0*r00*r01*sj0*(py*py*py*py)))+(((8.0)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((-16.0)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((8.0)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((0.0032637056212345)*(r01*r01)*(sj0*sj0)))+(((8.0)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((8.0)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((8.0)*pz*r00*r02*(px*px*px)))+(((8.0)*px*pz*r00*r02*(py*py)))+(((-8.0)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((-0.13283783440032)*cj0*py*pz*r00*r02*sj0))+(((-8.0)*(py*py)*(pz*pz)*(r01*r01)))+(((4.0)*(py*py)*(pz*pz)*(r02*r02)))+(((-8.0)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((-8.0)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((0.32894148)*py*pz*sj0*(r02*r02)))+(((-8.0)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-0.3600093344)*cj0*px*py*sj0*(r02*r02)))+(((0.32894148)*px*pz*r00*r01*sj0)));
op[3]=((((-0.386)*r01*r02*(py*py*py)*(sj0*sj0)))+(((0.00377196787501544)*px*r00*r02))+(((0.00377196787501544)*pz*(r02*r02)))+(((0.001326730636)*(cj0*cj0)*(r00*r00)))+(((2.27248)*px*py*pz*r00*r02*sj0))+(((0.10964716)*(pz*pz)*(r02*r02)))+(((-2.27248)*pz*r01*r02*sj0*(px*px)))+(((-0.00556923212498456)*pz*(r01*r01)*(sj0*sj0)))+(((1.13624)*cj0*(px*px*px)*(r00*r00)))+(((0.386)*pz*(py*py)*(r02*r02)))+(((-0.027497008)*pz*r01*r02*sj0))+(((-0.2855113344)*px*pz*r00*r01*sj0))+(((-1.13624)*py*sj0*(px*px)*(r01*r01)))+(((1.13624)*cj0*(px*px*px)*(r02*r02)))+(((-0.2855113344)*cj0*px*py*r01*r02))+(((-1.158)*px*r00*r02*(pz*pz)))+(((1.158)*cj0*py*r00*r02*sj0*(pz*pz)))+(((0.10964716)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((-1.158)*cj0*px*r01*r02*sj0*(py*py)))+(((-0.386)*pz*(cj0*cj0)*(py*py)*(r00*r00)))+(((0.002653461272)*cj0*r00*r01*sj0))+(((-0.386)*(pz*pz*pz)*(r02*r02)))+(((1.13624)*py*sj0*(px*px)*(r02*r02)))+(((-2.27248)*cj0*pz*r00*r02*(py*py)))+(((-0.027497008)*cj0*pz*r00*r02))+(((-1.544)*cj0*px*py*pz*sj0*(r02*r02)))+(((2.27248)*cj0*px*(py*py)*(r01*r01)))+(((-0.21929432)*px*py*r00*r01*(cj0*cj0)))+(((-0.386)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.2855113344)*px*py*r00*r02*sj0))+(((-0.10964716)*(py*py)*(r01*r01)*(sj0*sj0)))+(((0.386)*cj0*r00*r02*sj0*(py*py*py)))+(((0.386)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((0.00556923212498456)*px*r00*r02*(cj0*cj0)))+(((1.13624)*py*sj0*(pz*pz)*(r02*r02)))+(((0.00345468714624)*cj0*r00*r02))+(((-0.772)*pz*(py*py)*(r01*r01)))+(((0.386)*r00*r02*(px*px*px)))+(((0.0163937417349546)*py*sj0*(r02*r02)))+(((1.13624)*py*sj0*(pz*pz)*(r01*r01)))+(((0.10964716)*(px*px)*(r01*r01)*(sj0*sj0)))+(((-0.386)*r00*r02*(cj0*cj0)*(px*px*px)))+(((-0.2855113344)*cj0*px*pz*(r00*r00)))+(((1.13624)*sj0*(py*py*py)*(r01*r01)))+(((0.386)*cj0*r01*r02*sj0*(px*px*px)))+(((-0.772)*px*r00*r02*(py*py)*(sj0*sj0)))+(((-0.0111032662650454)*px*r00*r01*sj0))+(((0.00556923212498456)*py*r01*r02*(sj0*sj0)))+(((1.13624)*cj0*py*r00*r01*(pz*pz)))+(((-0.10964716)*(px*px)*(r02*r02)))+(((0.2855113344)*cj0*r00*r02*(py*py)))+(((-1.13624)*cj0*r00*r01*(py*py*py)))+(((-0.772)*py*r01*r02*(cj0*cj0)*(px*px)))+(((0.386)*py*r01*r02*(px*px)*(sj0*sj0)))+(((-0.772)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((0.772)*px*py*pz*r00*r01*(sj0*sj0)))+(((-0.21929432)*py*pz*r01*r02*(sj0*sj0)))+(((-0.0111032662650454)*py*sj0*(r01*r01)))+(((-1.13624)*r00*r01*sj0*(px*px*px)))+(((-0.0111032662650454)*cj0*py*r00*r01))+(((0.2855113344)*r01*r02*sj0*(px*px)))+(((-0.21929432)*cj0*px*pz*r01*r02*sj0))+(((-0.21929432)*px*pz*r00*r02*(cj0*cj0)))+(((1.158)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((0.001326730636)*(r01*r01)*(sj0*sj0)))+(((-0.00556923212498456)*pz*(cj0*cj0)*(r00*r00)))+(((0.10964716)*(cj0*cj0)*(py*py)*(r00*r00)))+(((1.13624)*px*r00*r01*sj0*(pz*pz)))+(((-0.386)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((-0.0111032662650454)*cj0*px*(r00*r00)))+(((-1.13624)*cj0*px*(py*py)*(r00*r00)))+(((-1.544)*px*py*pz*r00*r01))+(((0.386)*px*r00*r02*(cj0*cj0)*(py*py)))+(((-0.2855113344)*cj0*py*pz*r00*r01))+(((-0.2855113344)*py*pz*sj0*(r01*r01)))+(((-0.772)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((0.00556923212498456)*cj0*py*r00*r02*sj0))+(((-0.10964716)*(py*py)*(r02*r02)))+(((3.40872)*px*r00*r01*sj0*(py*py)))+(((2.27248)*py*sj0*(px*px)*(r00*r00)))+(((1.158)*cj0*px*r01*r02*sj0*(pz*pz)))+(((-0.386)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((0.21929432)*py*pz*r01*r02))+(((0.386)*py*r01*r02*(px*px)))+(((0.772)*cj0*px*py*pz*sj0*(r00*r00)))+(((0.772)*px*py*pz*r00*r01*(cj0*cj0)))+(((-0.21929432)*cj0*px*py*sj0*(r01*r01)))+(((1.13624)*cj0*px*(py*py)*(r02*r02)))+(((-0.10964716)*(cj0*cj0)*(px*px)*(r00*r00)))+(((0.386)*r01*r02*(py*py*py)))+(((-0.772)*pz*(px*px)*(r00*r00)))+(((0.386)*px*r00*r02*(py*py)))+(((-0.0111384642499691)*cj0*pz*r00*r01*sj0))+(((0.21929432)*cj0*r00*r01*sj0*(pz*pz)))+(((2.27248)*cj0*px*py*pz*r01*r02))+(((1.13624)*cj0*px*(pz*pz)*(r00*r00)))+(((-0.001326730636)*(r02*r02)))+(((1.13624)*sj0*(py*py*py)*(r02*r02)))+(((-1.158)*py*r01*r02*(pz*pz)))+(((3.40872)*cj0*py*r00*r01*(px*px)))+(((-0.21929432)*px*py*r00*r01*(sj0*sj0)))+(((-0.2855113344)*cj0*px*pz*(r02*r02)))+(((-1.158)*cj0*py*r00*r02*sj0*(px*px)))+(((0.386)*pz*(px*px)*(r02*r02)))+(((0.10964716)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.00377196787501544)*py*r01*r02))+(((0.00345468714624)*r01*r02*sj0))+(((1.13624)*cj0*px*(pz*pz)*(r02*r02)))+(((-0.21929432)*cj0*px*py*sj0*(r00*r00)))+(((0.21929432)*px*pz*r00*r02))+(((0.386)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((-0.21929432)*cj0*py*pz*r00*r02*sj0))+(((1.158)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((0.0163937417349546)*cj0*px*(r02*r02)))+(((-0.772)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((0.00556923212498456)*cj0*px*r01*r02*sj0))+(((0.772)*cj0*px*py*pz*sj0*(r01*r01)))+(((-0.2855113344)*py*pz*sj0*(r02*r02))));
op[4]=((((-0.386)*pz*r01*r02*sj0*(px*px)))+(((-0.01954387499992)*(cj0*cj0)*(py*py)*(r00*r00)))+(((-0.10954620859992)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.000663365318)*r01*r02*sj0))+(((-1.0)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.12229241719984)*py*pz*r01*r02))+(((0.00278461606249228)*cj0*px*(r02*r02)))+(((-4.0)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((0.193)*sj0*(py*py*py)*(r02*r02)))+(((-1.13624)*cj0*px*py*pz*sj0*(r00*r00)))+(((-12.0)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((1.13624)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((-4.0)*(px*px)*(pz*pz)*(r00*r00)))+(((-0.00819687086747728)*cj0*py*r00*r02*sj0))+(((0.386)*cj0*px*py*pz*r01*r02))+(((0.193)*py*sj0*(px*px)*(r02*r02)))+(((1.13624)*py*r01*r02*(cj0*cj0)*(px*px)))+(((0.21909241719984)*cj0*py*pz*r00*r02*sj0))+(((-0.05482358)*cj0*px*pz*(r00*r00)))+(((-0.56812)*cj0*r01*r02*sj0*(px*px*px)))+(((0.21909241719984)*px*pz*r00*r02*(cj0*cj0)))+(((-0.05482358)*py*pz*sj0*(r02*r02)))+(((-12.0)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((-1.70436)*cj0*py*r00*r02*sj0*(pz*pz)))+(((-0.56812)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((2.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((4.0)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((-0.05482358)*cj0*py*pz*r00*r01))+(((-0.05482358)*px*pz*r00*r01*sj0))+(((4.0)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((4.0)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((4.0)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((-0.56812)*pz*(px*px)*(r02*r02)))+(((-8.0)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((-9.5490762502752e-5)*(r01*r01)*(sj0*sj0)))+(((4.0)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((-1.13624)*px*py*pz*r00*r01*(sj0*sj0)))+(((0.193)*cj0*px*(py*py)*(r02*r02)))+(((-0.56812)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((-2.0)*(px*px)*(py*py)*(r02*r02)))+(((-0.00819687086747728)*py*r01*r02*(sj0*sj0)))+(((-8.0)*px*py*r00*r01*(pz*pz)))+(((-0.00555163313252272)*px*r00*r02))+(((1.13624)*pz*(py*py)*(r01*r01)))+(((0.56812)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((-0.56812)*px*r00*r02*(cj0*cj0)*(py*py)))+(((0.193)*cj0*px*(pz*pz)*(r02*r02)))+(((4.0)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((0.579)*px*r00*r01*sj0*(py*py)))+(((0.193)*py*sj0*(pz*pz)*(r02*r02)))+(((0.0163937417349546)*cj0*pz*r00*r01*sj0))+(((4.0)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((4.0)*pz*r01*r02*(py*py*py)))+(((-0.00931224999984)*(py*py)*(r01*r01)))+(((-1.0)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((-0.0046706)*cj0*pz*r00*r02))+(((0.193)*cj0*px*(pz*pz)*(r00*r00)))+(((-0.05482358)*cj0*px*pz*(r02*r02)))+(((-4.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((-0.386)*cj0*pz*r00*r02*(py*py)))+(((-0.000190981525005504)*cj0*r00*r01*sj0))+(((0.21909241719984)*py*pz*r01*r02*(sj0*sj0)))+(((0.386)*py*sj0*(px*px)*(r00*r00)))+(((0.01954387499992)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-2.0)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.56812)*r01*r02*(py*py*py)))+(((-4.0)*py*r01*r02*(pz*pz*pz)))+(((2.0)*cj0*r00*r01*sj0*(py*py*py*py)))+(((-1.0)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((2.0)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((-1.0)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((-0.56812)*px*r00*r02*(py*py)))+(((4.0)*py*pz*r01*r02*(px*px)))+(((-0.1800046672)*cj0*px*py*sj0*(r02*r02)))+(((-0.193)*cj0*px*(py*py)*(r00*r00)))+(((-0.12229241719984)*px*pz*r00*r02))+(((0.56812)*r01*r02*(py*py*py)*(sj0*sj0)))+(((4.0)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((-0.05482358)*px*py*r00*r02*sj0))+(((-0.05482358)*py*pz*sj0*(r01*r01)))+(((-0.21909241719984)*cj0*r00*r01*sj0*(pz*pz)))+(((0.000768181024057248)*(r02*r02)))+(((0.00819687086747728)*pz*(r01*r01)*(sj0*sj0)))+(((4.0)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((0.193)*px*r00*r01*sj0*(pz*pz)))+(((-0.56812)*cj0*r00*r02*sj0*(py*py*py)))+(((4.0)*pz*r00*r02*(px*px*px)))+(((-8.0)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((-2.0)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((0.386)*px*py*pz*r00*r02*sj0))+(((1.13624)*px*r00*r02*(py*py)*(sj0*sj0)))+(((-0.06114620859992)*(pz*pz)*(r02*r02)))+(((-1.70436)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((-4.0)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-4.0)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((0.03908774999984)*cj0*px*py*sj0*(r00*r00)))+(((-0.00931224999984)*(px*px)*(r00*r00)))+(((0.03908774999984)*px*py*r00*r01*(sj0*sj0)))+(((-1.0)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((0.01954387499992)*(cj0*cj0)*(px*px)*(r00*r00)))+(((-8.0)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((2.27248)*cj0*px*py*pz*sj0*(r02*r02)))+(((0.03908774999984)*cj0*px*py*sj0*(r01*r01)))+(((0.03908774999984)*px*py*r00*r01*(cj0*cj0)))+(((-0.00188598393750772)*cj0*py*r00*r01))+(((-0.00188598393750772)*px*r00*r01*sj0))+(((2.0)*(px*px)*(pz*pz)*(r02*r02)))+(((-4.0)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((-1.70436)*cj0*px*r01*r02*sj0*(pz*pz)))+(((0.000663365318)*cj0*r00*r02))+(((-1.0)*(py*py*py*py)*(r02*r02)))+(((-1.13624)*cj0*px*py*pz*sj0*(r01*r01)))+(((-0.56812)*r00*r02*(px*px*px)))+(((-0.56812)*py*r01*r02*(px*px)))+(((1.70436)*px*r00*r02*(pz*pz)))+(((2.0)*cj0*r00*r01*sj0*(px*px*px*px)))+(((-0.56812)*py*r01*r02*(px*px)*(sj0*sj0)))+(((-2.0)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((0.386)*cj0*px*(py*py)*(r01*r01)))+(((0.56812)*pz*(cj0*cj0)*(py*py)*(r00*r00)))+(((-0.00819687086747728)*px*r00*r02*(cj0*cj0)))+(((1.13624)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((-1.70436)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((1.70436)*py*r01*r02*(pz*pz)))+(((0.56812)*r00*r02*(cj0*cj0)*(px*px*px)))+(((0.56812)*(pz*pz*pz)*(r02*r02)))+(((1.13624)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((0.193)*sj0*(py*py*py)*(r01*r01)))+(((-4.0)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((-4.0)*(py*py)*(pz*pz)*(r01*r01)))+(((-1.0)*(pz*pz*pz*pz)*(r02*r02)))+(((-0.01954387499992)*(px*px)*(r01*r01)*(sj0*sj0)))+(((4.0)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((-0.193)*py*sj0*(px*px)*(r01*r01)))+(((-0.193)*cj0*r00*r01*(py*py*py)))+(((-4.0)*px*r00*r02*(pz*pz*pz)))+(((0.193)*cj0*(px*px*px)*(r02*r02)))+(((-0.56812)*pz*(py*py)*(r02*r02)))+(((0.56812)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.00188598393750772)*py*sj0*(r01*r01)))+(((0.00278461606249228)*py*sj0*(r02*r02)))+(((-1.0)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((0.05482358)*cj0*r00*r02*(py*py)))+(((0.05183395860008)*(py*py)*(r02*r02)))+(((4.0)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((0.00819687086747728)*pz*(cj0*cj0)*(r00*r00)))+(((4.0)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((4.0)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((0.21909241719984)*cj0*px*pz*r01*r02*sj0))+(((-0.00555163313252272)*pz*(r02*r02)))+(((0.193)*cj0*(px*px*px)*(r00*r00)))+(((4.0)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((1.13624)*pz*(px*px)*(r00*r00)))+(((-9.5490762502752e-5)*(cj0*cj0)*(r00*r00)))+(((-0.0046706)*pz*r01*r02*sj0))+(((-0.0900023336)*(cj0*cj0)*(px*px)*(r02*r02)))+(((4.0)*px*pz*r00*r02*(py*py)))+(((2.0)*(py*py)*(pz*pz)*(r02*r02)))+(((0.193)*py*sj0*(pz*pz)*(r01*r01)))+(((-0.05482358)*cj0*px*py*r01*r02))+(((2.0)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-4.0)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((-4.0)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((-1.13624)*px*py*pz*r00*r01*(cj0*cj0)))+(((0.579)*cj0*py*r00*r01*(px*px)))+(((-4.0)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((0.56812)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((-12.0)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((-0.00188598393750772)*cj0*px*(r00*r00)))+(((-0.00819687086747728)*cj0*px*r01*r02*sj0))+(((-0.01862449999968)*px*py*r00*r01))+(((1.70436)*cj0*py*r00*r02*sj0*(px*px)))+(((-0.00555163313252272)*py*r01*r02))+(((2.0)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-4.0)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((0.193)*cj0*py*r00*r01*(pz*pz)))+(((4.0)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((0.05482358)*r01*r02*sj0*(px*px)))+(((2.27248)*px*py*pz*r00*r01))+(((0.05183395860008)*(px*px)*(r02*r02)))+(((-0.193)*r00*r01*sj0*(px*px*px)))+(((1.70436)*cj0*px*r01*r02*sj0*(py*py)))+(((-1.0)*(px*px*px*px)*(r02*r02)))+(((-0.0900023336)*(py*py)*(r02*r02)*(sj0*sj0)))+(((4.0)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((-0.10954620859992)*(cj0*cj0)*(pz*pz)*(r00*r00))));
polyroots4(op,zeror,numroots);
IkReal j1array[4], cj1array[4], sj1array[4], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[4]={true,true,true,true};
_nj1 = 4;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=(((r00*sj0))+(((-1.0)*cj0*r01)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j3eval[2];
j3eval[0]=cj4;
j3eval[1]=IKsign(cj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x34=((9.09090909090008)*sj1);
IkReal x35=(cj0*px);
IkReal x36=(py*sj0);
IkReal x37=((3.08833601095493)*cj1);
if( (((0.312736025680564)+((x35*x37))+((x34*x35))+((x34*x36))+((x36*x37))+(((-32.0034819788076)*(py*py)))+(((-3.08833601095493)*pz*sj1))+(((-32.0034819788076)*(px*px)))+(((-32.0034819788076)*(pz*pz)))+(((9.09090909090008)*cj1*pz)))) < -1-IKFAST_SINCOS_THRESH || (((0.312736025680564)+((x35*x37))+((x34*x35))+((x34*x36))+((x36*x37))+(((-32.0034819788076)*(py*py)))+(((-3.08833601095493)*pz*sj1))+(((-32.0034819788076)*(px*px)))+(((-32.0034819788076)*(pz*pz)))+(((9.09090909090008)*cj1*pz)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x38=IKasin(((0.312736025680564)+((x35*x37))+((x34*x35))+((x34*x36))+((x36*x37))+(((-32.0034819788076)*(py*py)))+(((-3.08833601095493)*pz*sj1))+(((-32.0034819788076)*(px*px)))+(((-32.0034819788076)*(pz*pz)))+(((9.09090909090008)*cj1*pz))));
j3array[0]=((-1.5707977349481)+(((-1.0)*x38)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((1.57079491864169)+x38);
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x39=py*py;
IkReal x40=pz*pz;
IkReal x41=px*px;
IkReal x42=(px*sj0);
IkReal x43=((2.0)*py);
IkReal x44=(cj0*py);
IkReal x45=((0.0965)*r01);
IkReal x46=(cj0*pz);
IkReal x47=((0.28406)*cj1);
IkReal x48=(py*r00);
IkReal x49=((0.28406)*sj1);
IkReal x50=(r00*sj0);
IkReal x51=(cj0*r01);
IkReal x52=((0.0965)*r02*sj1);
IkReal x53=((1.0)*x51);
evalcond[0]=((-0.03227252090004)+(((0.0965)*pz*sj1*x50))+((px*r01*x49))+((x39*x51))+((x39*x50))+(((-1.0)*x40*x53))+(((-1.0)*x41*x53))+(((-1.0)*x48*x49))+(((-2.0)*pz*r02*x42))+(((-1.0)*r02*x44*x47))+(((-1.0)*x42*x52))+(((-1.0)*sj1*x45*x46))+((x44*x52))+((cj0*px*r00*x43))+(((-0.0312466)*(IKcos(j3))))+(((-0.0225005834)*x51))+(((-1.0)*x41*x50))+((cj1*px*x45))+(((0.0225005834)*x50))+((x40*x50))+(((-1.0)*r01*x42*x43))+((r01*x46*x47))+(((-1.0)*pz*x47*x50))+((r02*x42*x47))+(((-0.0965)*cj1*x48))+(((4.4e-8)*(IKsin(j3))))+((r02*x43*x46)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-733466.384091818)+sj3+(((-710150.0)*cj3)));
j2eval[1]=IKsign(((-0.03227252090004)+(((4.4e-8)*sj3))+(((-0.0312466)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x54=(cj0*px);
IkReal x55=(pz*sj1);
IkReal x56=(py*sj0);
IkReal x57=((0.14203)*sj1);
IkReal x58=(cj1*pz);
IkReal x59=((0.11)*cj3);
IkReal x60=((2.0e-7)*sj1);
IkReal x61=((0.14203)*cj1);
IkReal x62=((2.0e-7)*cj1);
IkReal x63=((0.11)*cj1*sj3);
IkReal x64=(sj1*x59);
IkReal x65=((0.11)*sj1*sj3);
CheckValue<IkReal> x66 = IKatan2WithCheck(IkReal(((-0.02017251125)+(((-1.0)*x56*x62))+(((-0.11)*sj3*x55))+((x58*x59))+(((-0.0156233)*cj3))+(((-0.0053075)*sj3))+(((-1.0)*x54*x62))+((x56*x64))+((x56*x63))+(((0.14203)*x58))+((x56*x57))+(((2.0e-7)*x55))+((x54*x64))+((x54*x63))+((x54*x57)))),IkReal(((0.006852975906)+(((0.11)*sj3*x58))+(((-1.0)*x56*x60))+(((-1.0)*x56*x61))+(((0.0053075)*cj3))+(((-2.0e-7)*x58))+(((-0.0156233)*sj3))+(((-1.0)*cj1*x56*x59))+(((-1.0)*x54*x60))+(((-1.0)*x54*x61))+((x56*x65))+(((0.14203)*x55))+((x54*x65))+((x55*x59))+(((-1.0)*cj1*x54*x59)))),IKFAST_ATAN2_MAGTHRESH);
if(!x66.valid){
continue;
}
CheckValue<IkReal> x67=IKPowWithIntegerCheck(IKsign(((-0.03227252090004)+(((4.4e-8)*sj3))+(((-0.0312466)*cj3)))),-1);
if(!x67.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x66.value)+(((1.5707963267949)*(x67.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x68=IKsin(j2);
IkReal x69=IKcos(j2);
IkReal x70=(px*sj1);
IkReal x71=(py*sj1);
IkReal x72=(cj1*sj0);
IkReal x73=((1.0)*px);
IkReal x74=(pz*r00);
IkReal x75=(r00*sj0);
IkReal x76=((1.0)*r01);
IkReal x77=(cj0*r01);
IkReal x78=(pz*sj1);
IkReal x79=(cj0*cj1);
IkReal x80=((0.14203)*x68);
IkReal x81=((2.0e-7)*x69);
IkReal x82=((2.0e-7)*x68);
IkReal x83=((0.14203)*x69);
IkReal x84=((0.11)*x69);
IkReal x85=((0.11)*x68);
IkReal x86=(cj3*x85);
IkReal x87=(sj3*x84);
IkReal x88=(sj3*x85);
IkReal x89=(cj3*x84);
IkReal x90=(x89+x82+x83);
IkReal x91=(x80+x86+x87);
evalcond[0]=((-0.14203)+((cj0*x70))+((cj1*pz))+x91+((sj0*x71))+(((-1.0)*x81)));
evalcond[1]=((0.04825)+x78+x90+(((-1.0)*x73*x79))+(((-1.0)*x88))+(((-1.0)*py*x72)));
evalcond[2]=((((-1.0)*x70*x76))+(((-1.0)*pz*x76*x79))+x91+(((-0.14203)*x75))+((x72*x74))+(((-1.0)*x81))+((py*r02*x79))+(((0.14203)*x77))+(((-1.0)*r02*x72*x73))+((r00*x71)));
evalcond[3]=((((-1.0)*cj1*r01*x73))+(((-0.04825)*x75))+((cj1*py*r00))+x88+(((-1.0)*sj0*sj1*x74))+((r02*sj0*x70))+(((-1.0)*x90))+(((-1.0)*cj0*r02*x71))+((x77*x78))+(((0.04825)*x77)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x92=((9.09090909090008)*sj1);
IkReal x93=(cj0*px);
IkReal x94=(py*sj0);
IkReal x95=((3.08833601095493)*cj1);
if( (((0.312736025680564)+((x92*x93))+((x92*x94))+(((-32.0034819788076)*(py*py)))+(((-3.08833601095493)*pz*sj1))+(((-32.0034819788076)*(px*px)))+((x93*x95))+(((-32.0034819788076)*(pz*pz)))+((x94*x95))+(((9.09090909090008)*cj1*pz)))) < -1-IKFAST_SINCOS_THRESH || (((0.312736025680564)+((x92*x93))+((x92*x94))+(((-32.0034819788076)*(py*py)))+(((-3.08833601095493)*pz*sj1))+(((-32.0034819788076)*(px*px)))+((x93*x95))+(((-32.0034819788076)*(pz*pz)))+((x94*x95))+(((9.09090909090008)*cj1*pz)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x96=IKasin(((0.312736025680564)+((x92*x93))+((x92*x94))+(((-32.0034819788076)*(py*py)))+(((-3.08833601095493)*pz*sj1))+(((-32.0034819788076)*(px*px)))+((x93*x95))+(((-32.0034819788076)*(pz*pz)))+((x94*x95))+(((9.09090909090008)*cj1*pz))));
j3array[0]=((-1.5707977349481)+(((-1.0)*x96)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((1.57079491864169)+x96);
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x97=py*py;
IkReal x98=pz*pz;
IkReal x99=px*px;
IkReal x100=(px*sj0);
IkReal x101=((2.0)*py);
IkReal x102=(cj0*py);
IkReal x103=((0.0965)*r01);
IkReal x104=(cj0*pz);
IkReal x105=((0.28406)*cj1);
IkReal x106=(py*r00);
IkReal x107=((0.28406)*sj1);
IkReal x108=(r00*sj0);
IkReal x109=(cj0*r01);
IkReal x110=((0.0965)*r02*sj1);
IkReal x111=((1.0)*x109);
evalcond[0]=((0.03227252090004)+(((-1.0)*r01*x100*x101))+(((-0.0965)*cj1*x106))+(((0.0965)*pz*sj1*x108))+(((-4.4e-8)*(IKsin(j3))))+(((-1.0)*x100*x110))+(((-0.0225005834)*x109))+(((-1.0)*pz*x105*x108))+((px*r01*x107))+((x102*x110))+(((-1.0)*x106*x107))+(((-1.0)*x111*x98))+(((-1.0)*x111*x99))+((r01*x104*x105))+((x108*x98))+((x108*x97))+((cj1*px*x103))+(((0.0312466)*(IKcos(j3))))+(((-2.0)*pz*r02*x100))+((cj0*px*r00*x101))+((r02*x100*x105))+((r02*x101*x104))+((x109*x97))+(((-1.0)*r02*x102*x105))+(((-1.0)*sj1*x103*x104))+(((0.0225005834)*x108))+(((-1.0)*x108*x99)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-733466.384091818)+sj3+(((-710150.0)*cj3)));
j2eval[1]=IKsign(((-0.03227252090004)+(((4.4e-8)*sj3))+(((-0.0312466)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x112=(cj0*px);
IkReal x113=(pz*sj1);
IkReal x114=(py*sj0);
IkReal x115=((0.14203)*sj1);
IkReal x116=(cj1*pz);
IkReal x117=((0.11)*cj3);
IkReal x118=((2.0e-7)*sj1);
IkReal x119=((0.14203)*cj1);
IkReal x120=((2.0e-7)*cj1);
IkReal x121=((0.11)*cj1*sj3);
IkReal x122=(sj1*x117);
IkReal x123=((0.11)*sj1*sj3);
CheckValue<IkReal> x124 = IKatan2WithCheck(IkReal(((-0.02017251125)+((x112*x122))+((x112*x121))+((x112*x115))+((x114*x115))+(((-1.0)*x112*x120))+(((-0.0156233)*cj3))+((x114*x121))+((x114*x122))+(((0.14203)*x116))+(((-0.0053075)*sj3))+(((-0.11)*sj3*x113))+(((-1.0)*x114*x120))+((x116*x117))+(((2.0e-7)*x113)))),IkReal(((0.006852975906)+(((-1.0)*x112*x119))+(((-1.0)*x112*x118))+((x112*x123))+(((0.0053075)*cj3))+((x114*x123))+((x113*x117))+(((0.14203)*x113))+(((-0.0156233)*sj3))+(((-1.0)*cj1*x112*x117))+(((-1.0)*x114*x119))+(((-1.0)*x114*x118))+(((0.11)*sj3*x116))+(((-2.0e-7)*x116))+(((-1.0)*cj1*x114*x117)))),IKFAST_ATAN2_MAGTHRESH);
if(!x124.valid){
continue;
}
CheckValue<IkReal> x125=IKPowWithIntegerCheck(IKsign(((-0.03227252090004)+(((4.4e-8)*sj3))+(((-0.0312466)*cj3)))),-1);
if(!x125.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x124.value)+(((1.5707963267949)*(x125.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x126=IKsin(j2);
IkReal x127=IKcos(j2);
IkReal x128=(px*sj1);
IkReal x129=(py*sj1);
IkReal x130=(cj1*sj0);
IkReal x131=((1.0)*px);
IkReal x132=(pz*r00);
IkReal x133=(r00*sj0);
IkReal x134=((1.0)*r01);
IkReal x135=(cj0*r01);
IkReal x136=(pz*sj1);
IkReal x137=(cj0*cj1);
IkReal x138=((2.0e-7)*x127);
IkReal x139=((0.14203)*x126);
IkReal x140=((2.0e-7)*x126);
IkReal x141=((0.14203)*x127);
IkReal x142=((0.11)*x127);
IkReal x143=((0.11)*x126);
IkReal x144=(cj3*x143);
IkReal x145=(sj3*x142);
IkReal x146=(cj3*x142);
IkReal x147=(sj3*x143);
IkReal x148=(x140+x141+x146);
IkReal x149=(x144+x145+x139);
evalcond[0]=((-0.14203)+((cj0*x128))+x149+((cj1*pz))+(((-1.0)*x138))+((sj0*x129)));
evalcond[1]=((0.04825)+(((-1.0)*x147))+x148+x136+(((-1.0)*py*x130))+(((-1.0)*x131*x137)));
evalcond[2]=((((-1.0)*x149))+((py*r02*x137))+(((0.14203)*x135))+(((-1.0)*r02*x130*x131))+x138+(((-1.0)*x128*x134))+((r00*x129))+((x130*x132))+(((-1.0)*pz*x134*x137))+(((-0.14203)*x133)));
evalcond[3]=((((-1.0)*x147))+((x135*x136))+(((-0.04825)*x133))+((cj1*py*r00))+x148+((r02*sj0*x128))+(((-1.0)*cj1*r01*x131))+(((0.04825)*x135))+(((-1.0)*cj0*r02*x129))+(((-1.0)*sj0*sj1*x132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x150=(r01*sj0);
IkReal x151=((171324397650.0)*sj1);
IkReal x152=((504312781250.0)*cj1);
IkReal x153=((171324397650.0)*cj1);
IkReal x154=(cj0*r00);
IkReal x155=((3550750000000.0)*r02);
IkReal x156=(py*sj0);
IkReal x157=(py*r01);
IkReal x158=((504312781250.0)*sj1);
IkReal x159=(px*r00);
IkReal x160=((5000000.0)*pz);
IkReal x161=(cj0*px);
IkReal x162=((3550750000000.0)*pz);
IkReal x163=((5000000.0)*r02);
CheckValue<IkReal> x164=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x164.valid){
continue;
}
CheckValue<IkReal> x165 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x160))+((x150*x151))+(((-1.0)*x150*x152))+((x150*x162))+((x151*x154))+(((-1.0)*x152*x154))+(((-5000000.0)*x159))+(((-5000000.0)*x157))+((x154*x162))+(((550000.0)*cj4))+(((-1.0)*x155*x156))+((r02*x153))+((r02*x158))+(((-1.0)*x155*x161)))),IkReal(((((-390582500000.0)*cj4))+(((-1.0)*x154*x158))+(((-1.0)*x153*x154))+(((-1.0)*x150*x153))+(((-1.0)*x150*x158))+((x150*x160))+(((3550750000000.0)*x157))+(((3550750000000.0)*x159))+(((-1.0)*x161*x163))+(((-1.0)*r02*x152))+((x154*x160))+((r02*x151))+(((-1.0)*x156*x163))+((pz*x155)))),IKFAST_ATAN2_MAGTHRESH);
if(!x165.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x164.value)))+(x165.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x166=IKcos(j3);
IkReal x167=IKsin(j3);
IkReal x168=pz*pz;
IkReal x169=py*py;
IkReal x170=px*px;
IkReal x171=(r01*sj0);
IkReal x172=(cj0*px);
IkReal x173=((0.28406)*sj1);
IkReal x174=((0.14203)*sj1);
IkReal x175=((1.0)*r02);
IkReal x176=((0.0965)*sj1);
IkReal x177=((0.0965)*cj1);
IkReal x178=(py*sj0);
IkReal x179=(cj0*r00);
IkReal x180=(px*r01);
IkReal x181=(cj1*r02);
IkReal x182=(cj0*py);
IkReal x183=((0.28406)*cj1);
IkReal x184=(py*r00);
IkReal x185=(r00*sj0);
IkReal x186=((0.04825)*sj1);
IkReal x187=((0.04825)*cj1);
IkReal x188=((2.0)*pz);
IkReal x189=(cj0*r01);
IkReal x190=((0.14203)*cj1);
IkReal x191=((2.0)*px*py);
IkReal x192=((4.4e-8)*x167);
IkReal x193=(px*r02*sj0);
IkReal x194=(pz*x189);
IkReal x195=((0.0312466)*x166);
IkReal x196=(cj4*x167);
IkReal x197=((1.0)*x170);
IkReal x198=(cj4*x166);
IkReal x199=((1.0)*x168);
evalcond[0]=((0.00977193750004)+((pz*x183))+(((-1.0)*x199))+(((-1.0)*x197))+(((-1.0)*x192))+(((-1.0)*pz*x176))+((x172*x173))+((x172*x177))+((x173*x178))+x195+(((-1.0)*x169))+((x177*x178)));
evalcond[1]=((((-1.0)*px*r00))+((x179*x187))+(((0.14203)*x181))+(((-1.0)*pz*x175))+(((-1.0)*r02*x186))+(((0.14203)*x198))+(((0.11)*cj4))+((x174*x179))+(((-2.0e-7)*x196))+((x171*x187))+((x171*x174))+(((-1.0)*py*r01)));
evalcond[2]=(((pz*x171))+((pz*x179))+(((-1.0)*x175*x178))+((x179*x186))+(((-0.14203)*x196))+(((-1.0)*x171*x190))+(((-2.0e-7)*x198))+(((0.04825)*x181))+((x171*x186))+(((-1.0)*x179*x190))+(((-1.0)*x172*x175))+((r02*x174)));
evalcond[3]=(((x177*x180))+(((-1.0)*pz*x183*x185))+((pz*x176*x185))+((r02*x176*x182))+(((-0.03227252090004)*sj4))+((x169*x189))+((x169*x185))+(((-1.0)*x188*x193))+(((0.28406)*px*sj0*x181))+((x168*x185))+((x173*x180))+(((-1.0)*x189*x197))+(((-1.0)*x189*x199))+(((2.0)*x172*x184))+(((-0.28406)*x181*x182))+(((-1.0)*x171*x191))+(((-1.0)*x177*x184))+((sj4*x192))+(((-1.0)*x176*x194))+(((-1.0)*x176*x193))+(((0.0225005834)*x185))+(((-1.0)*x185*x197))+((r02*x182*x188))+(((-0.0225005834)*x189))+(((-1.0)*x173*x184))+(((-1.0)*sj4*x195))+((x183*x194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=IKsign(cj4);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x200=(cj4*sj3);
IkReal x201=(cj3*cj4);
j2eval[0]=((((-1.0)*x201))+(((-710150.0)*x200)));
j2eval[1]=IKsign(((((-0.14203)*x200))+(((-2.0e-7)*x201))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x202=(cj3*cj4);
IkReal x203=(cj4*sj3);
j2eval[0]=((((710150.0)*x202))+(((550000.0)*cj4))+(((-1.0)*x203)));
j2eval[1]=IKsign(((((0.11)*cj4))+(((-2.0e-7)*x203))+(((0.14203)*x202))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-733466.384091818)+sj3+(((-710150.0)*cj3)));
j2eval[1]=IKsign(((-0.03227252090004)+(((4.4e-8)*sj3))+(((-0.0312466)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x204=(cj0*px);
IkReal x205=(pz*sj1);
IkReal x206=(py*sj0);
IkReal x207=((0.14203)*sj1);
IkReal x208=(cj1*pz);
IkReal x209=((0.11)*cj3);
IkReal x210=((2.0e-7)*sj1);
IkReal x211=((0.14203)*cj1);
IkReal x212=((2.0e-7)*cj1);
IkReal x213=((0.11)*cj1*sj3);
IkReal x214=(sj1*x209);
IkReal x215=((0.11)*sj1*sj3);
CheckValue<IkReal> x216 = IKatan2WithCheck(IkReal(((-0.02017251125)+((x204*x213))+((x204*x214))+((x206*x214))+((x206*x213))+(((-0.11)*sj3*x205))+(((-1.0)*x206*x212))+(((-0.0156233)*cj3))+(((2.0e-7)*x205))+(((-1.0)*x204*x212))+(((-0.0053075)*sj3))+((x204*x207))+((x208*x209))+((x206*x207))+(((0.14203)*x208)))),IkReal(((0.006852975906)+((x204*x215))+((x205*x209))+((x206*x215))+(((0.0053075)*cj3))+(((-1.0)*x206*x211))+(((-1.0)*x206*x210))+(((-1.0)*cj1*x206*x209))+(((-1.0)*x204*x210))+(((-1.0)*x204*x211))+(((-0.0156233)*sj3))+(((0.11)*sj3*x208))+(((-2.0e-7)*x208))+(((-1.0)*cj1*x204*x209))+(((0.14203)*x205)))),IKFAST_ATAN2_MAGTHRESH);
if(!x216.valid){
continue;
}
CheckValue<IkReal> x217=IKPowWithIntegerCheck(IKsign(((-0.03227252090004)+(((4.4e-8)*sj3))+(((-0.0312466)*cj3)))),-1);
if(!x217.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x216.value)+(((1.5707963267949)*(x217.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x218=IKsin(j2);
IkReal x219=IKcos(j2);
IkReal x220=(px*sj1);
IkReal x221=(py*sj1);
IkReal x222=(cj1*sj0);
IkReal x223=((1.0)*px);
IkReal x224=(pz*r00);
IkReal x225=(r00*sj0);
IkReal x226=((1.0)*r01);
IkReal x227=(cj0*r01);
IkReal x228=(pz*sj1);
IkReal x229=(cj0*cj1);
IkReal x230=((0.14203)*x218);
IkReal x231=((2.0e-7)*x219);
IkReal x232=((2.0e-7)*x218);
IkReal x233=((0.14203)*x219);
IkReal x234=((0.11)*x219);
IkReal x235=((0.11)*x218);
IkReal x236=(cj3*x235);
IkReal x237=(sj3*x234);
IkReal x238=(sj3*x235);
IkReal x239=(cj3*x234);
IkReal x240=(x239+x232+x233);
IkReal x241=(x230+x236+x237);
evalcond[0]=((-0.14203)+((sj0*x221))+((cj1*pz))+(((-1.0)*x231))+((cj0*x220))+x241);
evalcond[1]=((0.04825)+(((-1.0)*x238))+x228+x240+(((-1.0)*x223*x229))+(((-1.0)*py*x222)));
evalcond[2]=((((-1.0)*r02*x222*x223))+((x222*x224))+(((-0.14203)*x225))+((r00*x221))+(((-1.0)*x231))+x241+(((0.14203)*x227))+(((-1.0)*pz*x226*x229))+(((-1.0)*x220*x226))+((py*r02*x229)));
evalcond[3]=((((0.04825)*x227))+((x227*x228))+(((-1.0)*cj1*r01*x223))+((cj1*py*r00))+x238+((r02*sj0*x220))+(((-1.0)*sj0*sj1*x224))+(((-1.0)*x240))+(((-1.0)*cj0*r02*x221))+(((-0.04825)*x225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-733466.384091818)+sj3+(((-710150.0)*cj3)));
j2eval[1]=IKsign(((-0.03227252090004)+(((4.4e-8)*sj3))+(((-0.0312466)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x242=(cj0*px);
IkReal x243=(pz*sj1);
IkReal x244=(py*sj0);
IkReal x245=((0.14203)*sj1);
IkReal x246=(cj1*pz);
IkReal x247=((0.11)*cj3);
IkReal x248=((2.0e-7)*sj1);
IkReal x249=((0.14203)*cj1);
IkReal x250=((2.0e-7)*cj1);
IkReal x251=((0.11)*cj1*sj3);
IkReal x252=(sj1*x247);
IkReal x253=((0.11)*sj1*sj3);
CheckValue<IkReal> x254 = IKatan2WithCheck(IkReal(((-0.02017251125)+((x242*x251))+((x242*x252))+(((-1.0)*x242*x250))+(((-0.0156233)*cj3))+(((-1.0)*x244*x250))+(((-0.0053075)*sj3))+((x244*x245))+(((2.0e-7)*x243))+((x242*x245))+(((0.14203)*x246))+((x246*x247))+((x244*x251))+((x244*x252))+(((-0.11)*sj3*x243)))),IkReal(((0.006852975906)+((x242*x253))+(((-1.0)*x242*x248))+(((-1.0)*x242*x249))+(((0.11)*sj3*x246))+(((-2.0e-7)*x246))+(((0.0053075)*cj3))+(((-0.0156233)*sj3))+(((0.14203)*x243))+(((-1.0)*cj1*x244*x247))+((x243*x247))+((x244*x253))+(((-1.0)*cj1*x242*x247))+(((-1.0)*x244*x248))+(((-1.0)*x244*x249)))),IKFAST_ATAN2_MAGTHRESH);
if(!x254.valid){
continue;
}
CheckValue<IkReal> x255=IKPowWithIntegerCheck(IKsign(((-0.03227252090004)+(((4.4e-8)*sj3))+(((-0.0312466)*cj3)))),-1);
if(!x255.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x254.value)+(((1.5707963267949)*(x255.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x256=IKsin(j2);
IkReal x257=IKcos(j2);
IkReal x258=(px*sj1);
IkReal x259=(py*sj1);
IkReal x260=(cj1*sj0);
IkReal x261=((1.0)*px);
IkReal x262=(pz*r00);
IkReal x263=(r00*sj0);
IkReal x264=((1.0)*r01);
IkReal x265=(cj0*r01);
IkReal x266=(pz*sj1);
IkReal x267=(cj0*cj1);
IkReal x268=((2.0e-7)*x257);
IkReal x269=((0.14203)*x256);
IkReal x270=((2.0e-7)*x256);
IkReal x271=((0.14203)*x257);
IkReal x272=((0.11)*x257);
IkReal x273=((0.11)*x256);
IkReal x274=(cj3*x273);
IkReal x275=(sj3*x272);
IkReal x276=(cj3*x272);
IkReal x277=(sj3*x273);
IkReal x278=(x276+x270+x271);
IkReal x279=(x269+x274+x275);
evalcond[0]=((-0.14203)+((cj1*pz))+((sj0*x259))+x279+((cj0*x258))+(((-1.0)*x268)));
evalcond[1]=((0.04825)+(((-1.0)*py*x260))+x266+x278+(((-1.0)*x261*x267))+(((-1.0)*x277)));
evalcond[2]=((((-1.0)*r02*x260*x261))+(((-1.0)*x258*x264))+((r00*x259))+((x260*x262))+(((-1.0)*pz*x264*x267))+x268+((py*r02*x267))+(((-0.14203)*x263))+(((-1.0)*x279))+(((0.14203)*x265)));
evalcond[3]=((((-1.0)*sj0*sj1*x262))+(((-0.04825)*x263))+((cj1*py*r00))+x278+(((-1.0)*cj1*r01*x261))+(((0.04825)*x265))+((r02*sj0*x258))+(((-1.0)*x277))+((x265*x266))+(((-1.0)*cj0*r02*x259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x280=((0.14203)*sj1);
IkReal x281=(r01*sj0);
IkReal x282=((0.04825)*cj4);
IkReal x283=(cj0*r00);
IkReal x284=((0.11)*sj1);
IkReal x285=(cj1*r02);
IkReal x286=(cj4*sj3);
IkReal x287=((2.0e-7)*sj1);
IkReal x288=(cj3*cj4);
IkReal x289=(pz*sj1);
IkReal x290=(cj0*cj1*px);
IkReal x291=(cj1*py*sj0);
CheckValue<IkReal> x292=IKPowWithIntegerCheck(IKsign(((((0.11)*cj4))+(((-2.0e-7)*x286))+(((0.14203)*x288)))),-1);
if(!x292.valid){
continue;
}
CheckValue<IkReal> x293 = IKatan2WithCheck(IkReal((((x286*x289))+(((-0.11)*cj3*x285))+(((-1.0)*x286*x291))+(((-1.0)*x286*x290))+(((-1.0)*cj3*x281*x284))+(((-1.0)*x280*x281))+(((-1.0)*x280*x283))+((sj3*x282))+(((-0.14203)*x285))+(((-1.0)*cj3*x283*x284)))),IkReal(((((-1.0)*sj3*x283*x284))+(((-1.0)*cj3*x282))+(((-0.11)*sj3*x285))+(((2.0e-7)*x285))+(((-1.0)*x288*x289))+(((-1.0)*sj3*x281*x284))+((x281*x287))+((x283*x287))+((x288*x290))+((x288*x291)))),IKFAST_ATAN2_MAGTHRESH);
if(!x293.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x292.value)))+(x293.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x294=IKcos(j2);
IkReal x295=IKsin(j2);
IkReal x296=py*py;
IkReal x297=px*px;
IkReal x298=pz*pz;
IkReal x299=(r01*sj0);
IkReal x300=(py*sj1);
IkReal x301=((1.0)*cj1);
IkReal x302=((1.0)*sj1);
IkReal x303=(cj0*r00);
IkReal x304=(py*sj0);
IkReal x305=((0.0965)*r02);
IkReal x306=((2.0)*pz);
IkReal x307=(cj1*r02);
IkReal x308=(cj0*sj1);
IkReal x309=(pz*r01);
IkReal x310=(px*r01);
IkReal x311=(cj0*py);
IkReal x312=(r02*sj1);
IkReal x313=(px*sj0);
IkReal x314=((0.0178444584)*sj1);
IkReal x315=(cj1*py);
IkReal x316=((0.0965)*pz);
IkReal x317=((5.6812e-8)*sj3);
IkReal x318=((0.013705895)*sj1);
IkReal x319=((0.013705895)*cj1);
IkReal x320=((0.00807252089996)*sj3);
IkReal x321=((0.0178444584)*cj1);
IkReal x322=(px*r00);
IkReal x323=((0.28406)*pz);
IkReal x324=(py*r01);
IkReal x325=(r00*sj0);
IkReal x326=(cj0*r01);
IkReal x327=(cj0*px*r02);
IkReal x328=(pz*x325);
IkReal x329=(sj4*x295);
IkReal x330=(cj1*x322);
IkReal x331=(cj4*x294);
IkReal x332=(cj4*x295);
IkReal x333=((2.0e-7)*x294);
IkReal x334=((0.11)*x294);
IkReal x335=((0.11)*x295);
IkReal x336=(sj1*x298);
IkReal x337=((0.14203)*x294);
IkReal x338=(r02*x298);
IkReal x339=(cj3*x332);
evalcond[0]=(((sj3*x331))+((sj1*x299))+x307+x339+((sj1*x303)));
evalcond[1]=((((-1.0)*x301*x303))+((cj3*x331))+x312+(((-1.0)*x299*x301))+(((-1.0)*sj3*x332)));
evalcond[2]=((-0.14203)+((px*x308))+(((0.14203)*x295))+((sj3*x334))+((cj3*x335))+((cj1*pz))+(((-1.0)*x333))+((sj0*x300)));
evalcond[3]=((0.04825)+(((-1.0)*sj3*x335))+(((-1.0)*x301*x304))+(((2.0e-7)*x295))+((cj3*x334))+(((-1.0)*cj0*px*x301))+x337+((pz*sj1)));
evalcond[4]=((((-1.0)*r02*x301*x313))+((sj3*sj4*x334))+((cj1*x328))+(((-1.0)*sj4*x333))+(((-1.0)*x302*x310))+((x307*x311))+(((0.11)*cj3*x329))+(((-0.14203)*x325))+(((-1.0)*cj0*x301*x309))+((r00*x300))+(((0.14203)*x326))+(((0.14203)*x329)));
evalcond[5]=((((-1.0)*sj4*x337))+((x312*x313))+(((-1.0)*cj3*sj4*x334))+(((-2.0e-7)*x329))+(((-0.04825)*x325))+(((-1.0)*cj0*r02*x300))+((x308*x309))+((r00*x315))+(((0.11)*sj3*x329))+(((-1.0)*x301*x310))+(((0.04825)*x326))+(((-1.0)*x302*x328)));
evalcond[6]=((((-1.0)*x303*x321))+(((-1.0)*x299*x321))+((x297*x312))+(((-0.28406)*x327))+((x296*x312))+(((-1.0)*x298*x299*x301))+(((2.0)*x304*x330))+((x299*x318))+((x303*x323))+((cj0*px*x306*x307))+(((-1.0)*x302*x338))+((x317*x331))+((cj1*x296*x299))+(((-0.0965)*x324))+(((-0.0965)*x322))+(((-0.28406)*r02*x304))+(((-1.0)*sj1*x306*x322))+(((-1.0)*pz*x305))+((cj1*x297*x303))+(((-1.0)*r01*x300*x306))+(((-1.0)*x296*x301*x303))+(((2.0)*cj1*x310*x311))+(((-1.0)*x298*x301*x303))+(((0.0178444584)*x312))+((x299*x323))+(((-1.0)*x320*x332))+((x303*x318))+(((-1.0)*x297*x299*x301))+(((-4.4e-8)*x332))+(((-0.03227252089996)*cj3*x331))+(((0.013705895)*x307))+((x304*x306*x307))+(((-0.0312466)*x331))+(((-5.6812e-8)*x339)));
evalcond[7]=(((r02*x323))+(((-0.0178444584)*x307))+(((-1.0)*x296*x299*x302))+(((-2.0)*r00*x300*x313))+(((-0.03227252089996)*x339))+(((0.013705895)*x312))+(((-1.0)*x303*x319))+(((-1.0)*x303*x314))+(((-1.0)*r02*sj0*x300*x306))+(((-1.0)*px*r02*x306*x308))+((sj1*x297*x299))+((x299*x316))+(((-1.0)*cj0*px*x305))+((x303*x336))+(((-1.0)*x297*x302*x303))+((x317*x332))+((x320*x331))+((sj1*x296*x303))+((x297*x307))+(((-1.0)*x299*x314))+(((-1.0)*x299*x319))+(((5.6812e-8)*cj3*x331))+(((4.4e-8)*x331))+(((-1.0)*r01*x306*x315))+((x299*x336))+((x296*x307))+(((-1.0)*x306*x330))+(((-1.0)*x304*x305))+((x303*x316))+(((-2.0)*cj0*x300*x310))+(((0.28406)*x324))+(((0.28406)*x322))+(((-1.0)*x301*x338))+(((-0.0312466)*x332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x340=(sj0*sj1);
IkReal x341=(cj0*sj1);
IkReal x342=((0.11)*r00);
IkReal x343=(cj4*sj3);
IkReal x344=(cj1*pz);
IkReal x345=(cj1*r02);
IkReal x346=((0.11)*sj3);
IkReal x347=(cj3*cj4);
IkReal x348=((0.11)*cj3);
IkReal x349=((0.14203)*x343);
IkReal x350=((1.0)*x347);
CheckValue<IkReal> x351=IKPowWithIntegerCheck(IKsign(((((-2.0e-7)*x347))+(((-1.0)*x349)))),-1);
if(!x351.valid){
continue;
}
CheckValue<IkReal> x352 = IKatan2WithCheck(IkReal((((px*x341*x343))+(((-1.0)*sj3*x341*x342))+(((-1.0)*r01*x340*x346))+((py*x340*x343))+(((2.0e-7)*r00*x341))+(((-1.0)*x345*x346))+(((-1.0)*x349))+(((2.0e-7)*x345))+((x343*x344))+(((2.0e-7)*r01*x340)))),IkReal((((cj3*x341*x342))+(((-1.0)*px*x341*x350))+((r01*x340*x348))+(((-1.0)*py*x340*x350))+((x345*x348))+(((-1.0)*x344*x350))+(((0.14203)*r00*x341))+(((0.14203)*r01*x340))+(((0.14203)*x347))+(((0.14203)*x345)))),IKFAST_ATAN2_MAGTHRESH);
if(!x352.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x351.value)))+(x352.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x353=IKcos(j2);
IkReal x354=IKsin(j2);
IkReal x355=py*py;
IkReal x356=px*px;
IkReal x357=pz*pz;
IkReal x358=(r01*sj0);
IkReal x359=(py*sj1);
IkReal x360=((1.0)*cj1);
IkReal x361=((1.0)*sj1);
IkReal x362=(cj0*r00);
IkReal x363=(py*sj0);
IkReal x364=((0.0965)*r02);
IkReal x365=((2.0)*pz);
IkReal x366=(cj1*r02);
IkReal x367=(cj0*sj1);
IkReal x368=(pz*r01);
IkReal x369=(px*r01);
IkReal x370=(cj0*py);
IkReal x371=(r02*sj1);
IkReal x372=(px*sj0);
IkReal x373=((0.0178444584)*sj1);
IkReal x374=(cj1*py);
IkReal x375=((0.0965)*pz);
IkReal x376=((5.6812e-8)*sj3);
IkReal x377=((0.013705895)*sj1);
IkReal x378=((0.013705895)*cj1);
IkReal x379=((0.00807252089996)*sj3);
IkReal x380=((0.0178444584)*cj1);
IkReal x381=(px*r00);
IkReal x382=((0.28406)*pz);
IkReal x383=(py*r01);
IkReal x384=(r00*sj0);
IkReal x385=(cj0*r01);
IkReal x386=(cj0*px*r02);
IkReal x387=(pz*x384);
IkReal x388=(sj4*x354);
IkReal x389=(cj1*x381);
IkReal x390=(cj4*x353);
IkReal x391=(cj4*x354);
IkReal x392=((2.0e-7)*x353);
IkReal x393=((0.11)*x353);
IkReal x394=((0.11)*x354);
IkReal x395=(sj1*x357);
IkReal x396=((0.14203)*x353);
IkReal x397=(r02*x357);
IkReal x398=(cj3*x391);
evalcond[0]=(((sj1*x362))+x366+x398+((sj3*x390))+((sj1*x358)));
evalcond[1]=((((-1.0)*x360*x362))+(((-1.0)*sj3*x391))+(((-1.0)*x358*x360))+x371+((cj3*x390)));
evalcond[2]=((-0.14203)+(((-1.0)*x392))+((cj1*pz))+((sj3*x393))+((px*x367))+((cj3*x394))+((sj0*x359))+(((0.14203)*x354)));
evalcond[3]=((0.04825)+(((-1.0)*x360*x363))+(((-1.0)*sj3*x394))+(((-1.0)*cj0*px*x360))+x396+((cj3*x393))+((pz*sj1))+(((2.0e-7)*x354)));
evalcond[4]=(((sj3*sj4*x393))+(((-1.0)*sj4*x392))+(((-1.0)*cj0*x360*x368))+(((0.14203)*x385))+(((0.14203)*x388))+(((-1.0)*x361*x369))+((cj1*x387))+(((-0.14203)*x384))+((r00*x359))+((x366*x370))+(((-1.0)*r02*x360*x372))+(((0.11)*cj3*x388)));
evalcond[5]=((((-1.0)*sj4*x396))+(((-1.0)*cj0*r02*x359))+(((-1.0)*x360*x369))+((r00*x374))+(((-1.0)*cj3*sj4*x393))+(((-0.04825)*x384))+(((-1.0)*x361*x387))+(((-2.0e-7)*x388))+(((0.11)*sj3*x388))+(((0.04825)*x385))+((x367*x368))+((x371*x372)));
evalcond[6]=((((-1.0)*x358*x380))+(((-1.0)*x356*x358*x360))+(((-1.0)*x361*x397))+(((-1.0)*x357*x358*x360))+(((2.0)*x363*x389))+(((0.0178444584)*x371))+((x358*x377))+(((-1.0)*x355*x360*x362))+((cj1*x356*x362))+(((-1.0)*x357*x360*x362))+((x362*x382))+((x356*x371))+((x355*x371))+((cj0*px*x365*x366))+(((-1.0)*r01*x359*x365))+(((-0.0965)*x383))+(((-0.0965)*x381))+(((-0.03227252089996)*cj3*x390))+(((-0.0312466)*x390))+(((-5.6812e-8)*x398))+(((0.013705895)*x366))+((x376*x390))+(((-4.4e-8)*x391))+(((-1.0)*sj1*x365*x381))+(((2.0)*cj1*x369*x370))+(((-1.0)*x362*x380))+(((-0.28406)*r02*x363))+((x363*x365*x366))+(((-0.28406)*x386))+((x358*x382))+(((-1.0)*pz*x364))+(((-1.0)*x379*x391))+((cj1*x355*x358))+((x362*x377)));
evalcond[7]=((((-1.0)*x362*x378))+(((-1.0)*x362*x373))+(((-1.0)*x363*x364))+(((-1.0)*r01*x365*x374))+(((4.4e-8)*x390))+((x358*x375))+(((-1.0)*x355*x358*x361))+(((-1.0)*x356*x361*x362))+((x379*x390))+(((-1.0)*x365*x389))+((x358*x395))+(((-1.0)*cj0*px*x364))+((x355*x366))+(((-0.0178444584)*x366))+(((-1.0)*x358*x373))+(((-1.0)*x358*x378))+((r02*x382))+(((0.013705895)*x371))+((x356*x366))+(((-2.0)*r00*x359*x372))+(((-0.0312466)*x391))+(((0.28406)*x383))+(((0.28406)*x381))+(((-2.0)*cj0*x359*x369))+((x376*x391))+(((-1.0)*r02*sj0*x359*x365))+(((-0.03227252089996)*x398))+(((-1.0)*px*r02*x365*x367))+(((5.6812e-8)*cj3*x390))+((sj1*x356*x358))+((x362*x395))+(((-1.0)*x360*x397))+((sj1*x355*x362))+((x362*x375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x399=((1.0)*sj1);
IkReal x400=((1.0)*sj3);
IkReal x401=(cj3*r02);
IkReal x402=(r01*sj0);
IkReal x403=(cj0*r00);
IkReal x404=(cj3*x402);
IkReal x405=(cj1*x403);
CheckValue<IkReal> x406=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x406.valid){
continue;
}
CheckValue<IkReal> x407 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*x401))+(((-1.0)*x400*x405))+(((-1.0)*cj3*x399*x403))+(((-1.0)*x399*x404))+(((-1.0)*cj1*x400*x402))+((r02*sj1*sj3)))),IkReal(((((-1.0)*x399*x401))+(((-1.0)*sj3*x399*x402))+(((-1.0)*sj3*x399*x403))+(((-1.0)*cj1*r02*x400))+((cj1*x404))+((cj3*x405)))),IKFAST_ATAN2_MAGTHRESH);
if(!x407.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x406.value)))+(x407.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x408=IKcos(j2);
IkReal x409=IKsin(j2);
IkReal x410=py*py;
IkReal x411=px*px;
IkReal x412=pz*pz;
IkReal x413=(r01*sj0);
IkReal x414=(py*sj1);
IkReal x415=((1.0)*cj1);
IkReal x416=((1.0)*sj1);
IkReal x417=(cj0*r00);
IkReal x418=(py*sj0);
IkReal x419=((0.0965)*r02);
IkReal x420=((2.0)*pz);
IkReal x421=(cj1*r02);
IkReal x422=(cj0*sj1);
IkReal x423=(pz*r01);
IkReal x424=(px*r01);
IkReal x425=(cj0*py);
IkReal x426=(r02*sj1);
IkReal x427=(px*sj0);
IkReal x428=((0.0178444584)*sj1);
IkReal x429=(cj1*py);
IkReal x430=((0.0965)*pz);
IkReal x431=((5.6812e-8)*sj3);
IkReal x432=((0.013705895)*sj1);
IkReal x433=((0.013705895)*cj1);
IkReal x434=((0.00807252089996)*sj3);
IkReal x435=((0.0178444584)*cj1);
IkReal x436=(px*r00);
IkReal x437=((0.28406)*pz);
IkReal x438=(py*r01);
IkReal x439=(r00*sj0);
IkReal x440=(cj0*r01);
IkReal x441=(cj0*px*r02);
IkReal x442=(pz*x439);
IkReal x443=(sj4*x409);
IkReal x444=(cj1*x436);
IkReal x445=(cj4*x408);
IkReal x446=(cj4*x409);
IkReal x447=((2.0e-7)*x408);
IkReal x448=((0.11)*x408);
IkReal x449=((0.11)*x409);
IkReal x450=(sj1*x412);
IkReal x451=((0.14203)*x408);
IkReal x452=(r02*x412);
IkReal x453=(cj3*x446);
evalcond[0]=(((sj1*x417))+((sj1*x413))+x421+x453+((sj3*x445)));
evalcond[1]=(x426+((cj3*x445))+(((-1.0)*x415*x417))+(((-1.0)*x413*x415))+(((-1.0)*sj3*x446)));
evalcond[2]=((-0.14203)+(((0.14203)*x409))+(((-1.0)*x447))+((sj0*x414))+((cj1*pz))+((sj3*x448))+((cj3*x449))+((px*x422)));
evalcond[3]=((0.04825)+(((-1.0)*sj3*x449))+(((-1.0)*cj0*px*x415))+(((2.0e-7)*x409))+x451+((cj3*x448))+(((-1.0)*x415*x418))+((pz*sj1)));
evalcond[4]=((((-1.0)*x416*x424))+((cj1*x442))+(((-1.0)*cj0*x415*x423))+(((-0.14203)*x439))+((r00*x414))+((sj3*sj4*x448))+(((-1.0)*r02*x415*x427))+(((-1.0)*sj4*x447))+(((0.14203)*x443))+(((0.14203)*x440))+((x421*x425))+(((0.11)*cj3*x443)));
evalcond[5]=(((x426*x427))+(((-1.0)*sj4*x451))+(((-1.0)*cj0*r02*x414))+(((-1.0)*x416*x442))+(((-1.0)*cj3*sj4*x448))+((r00*x429))+(((0.11)*sj3*x443))+(((-1.0)*x415*x424))+(((-0.04825)*x439))+((x422*x423))+(((0.04825)*x440))+(((-2.0e-7)*x443)));
evalcond[6]=((((-1.0)*x413*x435))+((cj0*px*x420*x421))+(((-1.0)*x411*x413*x415))+((x418*x420*x421))+(((-1.0)*r01*x414*x420))+(((-0.28406)*r02*x418))+((cj1*x410*x413))+(((0.013705895)*x421))+((x410*x426))+(((-1.0)*x412*x413*x415))+(((-1.0)*x434*x446))+((x411*x426))+((cj1*x411*x417))+((x413*x432))+((x413*x437))+(((-1.0)*x410*x415*x417))+(((-1.0)*x412*x415*x417))+(((2.0)*cj1*x424*x425))+(((-4.4e-8)*x446))+((x431*x445))+(((-0.0965)*x438))+(((-0.0965)*x436))+(((-0.28406)*x441))+(((-0.0312466)*x445))+(((-1.0)*x416*x452))+(((-1.0)*x417*x435))+(((-0.03227252089996)*cj3*x445))+(((-5.6812e-8)*x453))+(((-1.0)*pz*x419))+(((0.0178444584)*x426))+(((-1.0)*sj1*x420*x436))+((x417*x437))+((x417*x432))+(((2.0)*x418*x444)));
evalcond[7]=((((-1.0)*x413*x433))+(((-1.0)*x411*x416*x417))+(((-1.0)*x418*x419))+(((-1.0)*cj0*px*x419))+((x434*x445))+(((-1.0)*px*r02*x420*x422))+(((-1.0)*x420*x444))+((sj1*x410*x417))+(((-2.0)*cj0*x414*x424))+(((0.013705895)*x426))+((x410*x421))+(((-1.0)*r02*sj0*x414*x420))+((r02*x437))+((sj1*x411*x413))+((x411*x421))+((x417*x450))+(((-0.0178444584)*x421))+(((4.4e-8)*x445))+((x413*x430))+(((-0.03227252089996)*x453))+(((-1.0)*x410*x413*x416))+((x413*x450))+(((-1.0)*x415*x452))+((x431*x446))+(((0.28406)*x438))+(((0.28406)*x436))+(((-1.0)*x417*x428))+(((-1.0)*r01*x420*x429))+(((-0.0312466)*x446))+(((-1.0)*x417*x433))+(((-1.0)*x413*x428))+(((5.6812e-8)*cj3*x445))+((x417*x430))+(((-2.0)*r00*x414*x427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
    }
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - widowx_arm (a24fe1d50482e1d414a7242de1b6e8fa)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
