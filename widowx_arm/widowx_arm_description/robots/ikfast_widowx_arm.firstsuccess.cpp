/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-06-05 16:28:03.702460
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKcos(j[2]);
x3=IKcos(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKsin(j[0]);
x7=IKcos(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=((0.14203)*x4);
x11=((0.0715)*x2);
x12=((1.0)*x4);
x13=((1.0)*x2);
x14=((2.0e-7)*x2);
x15=((0.0715)*x4);
x16=((0.14203)*x2);
x17=((2.0e-7)*x4);
x18=((1.0)*x7);
x19=((1.0)*x5);
x20=(x0*x3);
x21=(x1*x4);
x22=(x0*x1);
x23=(x1*x6);
x24=(x3*x6);
x25=(x1*x2);
IkReal x26=((1.0)*x22);
IkReal x27=((1.0)*x20);
eetrans[0]=((((0.04825)*x20))+(((0.14203)*x22))+((x14*x22))+(((-1.0)*x10*x26))+((x16*x20))+((x17*x20))+((x5*(((((-1.0)*x11*x27))+((x15*x22))))))+((x7*(((((-1.0)*x11*x26))+(((-1.0)*x15*x27)))))));
IkReal x28=((1.0)*x23);
IkReal x29=((1.0)*x24);
eetrans[1]=((((0.04825)*x24))+(((0.14203)*x23))+((x14*x23))+(((-1.0)*x10*x28))+((x16*x24))+((x17*x24))+((x5*(((((-1.0)*x11*x29))+((x15*x23))))))+((x7*(((((-1.0)*x11*x28))+(((-1.0)*x15*x29)))))));
IkReal x30=((1.0)*x3);
IkReal x31=((1.0)*x1);
eetrans[2]=((0.145)+((x7*((((x1*x15))+(((-1.0)*x11*x30))))))+(((-1.0)*x10*x30))+(((0.14203)*x3))+((x14*x3))+(((-0.04825)*x1))+(((-1.0)*x17*x31))+(((-1.0)*x16*x31))+((x5*((((x1*x11))+((x15*x3)))))));
eerot[0]=(((x6*x9))+(((-1.0)*x8*((((x19*((((x12*x20))+((x13*x22))))))+((x18*((((x0*x21))+(((-1.0)*x13*x20)))))))))));
eerot[1]=((((-1.0)*x8*((((x19*((((x12*x24))+((x13*x23))))))+((x18*(((((-1.0)*x13*x24))+((x21*x6))))))))))+(((-1.0)*x0*x9)));
eerot[2]=((-1.0)*x8*((((x18*((x25+((x3*x4))))))+((x19*(((((-1.0)*x1*x12))+((x13*x3)))))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=r01;
new_py=py;
new_r02=r02;
new_pz=((-0.145)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x33 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x33.valid){
continue;
}
IkReal x32=x33.value;
j0array[0]=((-1.0)*x32);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x32)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IkReal op[4+1], zeror[4];
int numroots;
op[0]=((((-1.0)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.56812)*r01*r02*(py*py*py)*(sj0*sj0)))+(((-1.70436)*cj0*px*r01*r02*sj0*(py*py)))+(((0.56812)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((-0.00143598031249228)*cj0*px*(r00*r00)))+(((0.13161891720016)*cj0*px*py*sj0*(r01*r01)))+(((-4.0)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((0.06580945860008)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-12.0)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((-4.0)*(px*px)*(pz*pz)*(r00*r00)))+(((-0.193)*cj0*px*(pz*pz)*(r02*r02)))+(((0.56812)*pz*(py*py)*(r02*r02)))+(((0.06580945860008)*(cj0*cj0)*(px*px)*(r00*r00)))+(((0.56812)*cj0*r00*r02*sj0*(py*py*py)))+(((0.00158175260252272)*pz*(r01*r01)*(sj0*sj0)))+(((-0.05482358)*cj0*px*pz*(r00*r00)))+(((0.386)*pz*r01*r02*sj0*(px*px)))+(((-0.579)*px*r00*r01*sj0*(py*py)))+(((-0.000280271846855)*cj0*r00*r02))+(((-0.05482358)*py*pz*sj0*(r02*r02)))+(((-12.0)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((-0.193)*cj0*py*r00*r01*(pz*pz)))+(((-0.0019733285)*pz*r01*r02*sj0))+(((2.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((4.0)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((-0.05482358)*cj0*py*pz*r00*r01))+(((-0.05482358)*px*pz*r00*r01*sj0))+(((-0.0019733285)*cj0*pz*r00*r02))+(((4.0)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((4.0)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((1.70436)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((0.13161891720016)*px*py*r00*r01*(sj0*sj0)))+(((4.0)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((-8.0)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((-0.00422699033747728)*px*r00*r02))+(((0.15024341719984)*cj0*px*pz*r01*r02*sj0))+(((4.0)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((0.386)*cj0*pz*r00*r02*(py*py)))+(((0.000357149629787039)*(r01*r01)*(sj0*sj0)))+(((-0.193)*px*r00*r01*sj0*(pz*pz)))+(((-2.0)*(px*px)*(py*py)*(r02*r02)))+(((-0.00158175260252272)*cj0*px*r01*r02*sj0))+(((-8.0)*px*py*r00*r01*(pz*pz)))+(((-0.193)*cj0*(px*px*px)*(r02*r02)))+(((0.56812)*r01*r02*(py*py*py)))+(((-1.13624)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((0.56812)*cj0*r01*r02*sj0*(px*px*px)))+(((-0.00143598031249228)*cj0*py*r00*r01))+(((4.0)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((0.193)*cj0*px*(py*py)*(r00*r00)))+(((4.0)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((-0.07512170859992)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.00422699033747728)*py*r01*r02))+(((4.0)*pz*r01*r02*(py*py*py)))+(((-1.0)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((0.00556837499992)*(py*py)*(r02*r02)))+(((-1.13624)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((-0.05482358)*cj0*px*pz*(r02*r02)))+(((-4.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((-0.01862449999968)*cj0*px*py*sj0*(r02*r02)))+(((-0.06580945860008)*(px*px)*(r01*r01)*(sj0*sj0)))+(((-2.0)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.00931224999984)*(cj0*cj0)*(px*px)*(r02*r02)))+(((0.15024341719984)*px*pz*r00*r02*(cj0*cj0)))+(((-4.0)*py*r01*r02*(pz*pz*pz)))+(((-0.1800046672)*px*py*r00*r01))+(((-2.27248)*px*py*pz*r00*r01))+(((1.13624)*cj0*px*py*pz*sj0*(r01*r01)))+(((-0.386)*cj0*px*py*pz*r01*r02))+(((2.0)*cj0*r00*r01*sj0*(py*py*py*py)))+(((0.56812)*py*r01*r02*(px*px)*(sj0*sj0)))+(((-1.70436)*px*r00*r02*(pz*pz)))+(((-1.0)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((2.0)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((-1.0)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((4.0)*py*pz*r01*r02*(px*px)))+(((-0.56812)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((1.13624)*cj0*px*py*pz*sj0*(r00*r00)))+(((-1.70436)*py*r01*r02*(pz*pz)))+(((0.193)*py*sj0*(px*px)*(r01*r01)))+(((4.0)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((-0.00422699033747728)*pz*(r02*r02)))+(((-0.05482358)*px*py*r00*r02*sj0))+(((-0.05482358)*py*pz*sj0*(r01*r01)))+(((4.0)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((-7.75170003456103e-6)*(r02*r02)))+(((0.56812)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((4.0)*pz*r00*r02*(px*px*px)))+(((-8.0)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((-0.000280271846855)*r01*r02*sj0))+(((-2.0)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((-0.193)*cj0*px*(pz*pz)*(r00*r00)))+(((-4.0)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-0.0900023336)*(py*py)*(r01*r01)))+(((0.56812)*py*r01*r02*(px*px)))+(((0.15024341719984)*cj0*py*pz*r00*r02*sj0))+(((-4.0)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((-1.0)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((-0.56812)*pz*(cj0*cj0)*(py*py)*(r00*r00)))+(((-1.13624)*px*r00*r02*(py*py)*(sj0*sj0)))+(((1.13624)*px*py*pz*r00*r01*(sj0*sj0)))+(((-8.0)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((-0.09557070859992)*(pz*pz)*(r02*r02)))+(((0.56812)*px*r00*r02*(cj0*cj0)*(py*py)))+(((2.0)*(px*px)*(pz*pz)*(r02*r02)))+(((-4.0)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((-1.13624)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((-0.193)*cj0*px*(py*py)*(r02*r02)))+(((-0.386)*px*py*pz*r00*r02*sj0))+(((-0.386)*cj0*px*(py*py)*(r01*r01)))+(((-1.0)*(py*py*py*py)*(r02*r02)))+(((-0.193)*cj0*(px*px*px)*(r00*r00)))+(((-0.579)*cj0*py*r00*r01*(px*px)))+(((-0.56812)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((2.0)*cj0*r00*r01*sj0*(px*px*px*px)))+(((-0.56812)*r00*r02*(cj0*cj0)*(px*px*px)))+(((-2.0)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((0.13161891720016)*cj0*px*py*sj0*(r00*r00)))+(((0.56812)*px*r00*r02*(py*py)))+(((-0.06580945860008)*(cj0*cj0)*(py*py)*(r00*r00)))+(((-0.193)*py*sj0*(pz*pz)*(r02*r02)))+(((-0.00158175260252272)*cj0*py*r00*r02*sj0))+(((0.15024341719984)*py*pz*r01*r02*(sj0*sj0)))+(((-0.386)*py*sj0*(px*px)*(r00*r00)))+(((-0.00143598031249228)*px*r00*r01*sj0))+(((-4.0)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((-4.0)*(py*py)*(pz*pz)*(r01*r01)))+(((-1.0)*(pz*pz*pz*pz)*(r02*r02)))+(((0.56812)*pz*(px*px)*(r02*r02)))+(((4.0)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((-0.07512170859992)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((-0.19114141719984)*py*pz*r01*r02))+(((-4.0)*px*r00*r02*(pz*pz*pz)))+(((1.70436)*cj0*px*r01*r02*sj0*(pz*pz)))+(((0.56812)*r00*r02*(px*px*px)))+(((0.00053734818750772)*py*sj0*(r02*r02)))+(((-1.0)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((0.05482358)*cj0*r00*r02*(py*py)))+(((4.0)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((-1.13624)*pz*(px*px)*(r00*r00)))+(((-0.19114141719984)*px*pz*r00*r02))+(((4.0)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((-0.00931224999984)*(py*py)*(r02*r02)*(sj0*sj0)))+(((4.0)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((0.00316350520504545)*cj0*pz*r00*r01*sj0))+(((-0.00158175260252272)*px*r00*r02*(cj0*cj0)))+(((0.193)*cj0*r00*r01*(py*py*py)))+(((0.00158175260252272)*pz*(cj0*cj0)*(r00*r00)))+(((-1.70436)*cj0*py*r00*r02*sj0*(px*px)))+(((4.0)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((0.13161891720016)*px*py*r00*r01*(cj0*cj0)))+(((-2.27248)*cj0*px*py*pz*sj0*(r02*r02)))+(((1.70436)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((-0.193)*py*sj0*(px*px)*(r02*r02)))+(((4.0)*px*pz*r00*r02*(py*py)))+(((2.0)*(py*py)*(pz*pz)*(r02*r02)))+(((-0.56812)*(pz*pz*pz)*(r02*r02)))+(((1.13624)*px*py*pz*r00*r01*(cj0*cj0)))+(((-0.05482358)*cj0*px*py*r01*r02))+(((-1.13624)*py*r01*r02*(cj0*cj0)*(px*px)))+(((2.0)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.000714299259574078)*cj0*r00*r01*sj0))+(((-0.15024341719984)*cj0*r00*r01*sj0*(pz*pz)))+(((-4.0)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((0.193)*r00*r01*sj0*(px*px*px)))+(((-4.0)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((-0.00158175260252272)*py*r01*r02*(sj0*sj0)))+(((-0.56812)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-4.0)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-12.0)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((1.70436)*cj0*py*r00*r02*sj0*(pz*pz)))+(((-0.00143598031249228)*py*sj0*(r01*r01)))+(((-0.193)*sj0*(py*py*py)*(r02*r02)))+(((2.0)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-4.0)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((0.00556837499992)*(px*px)*(r02*r02)))+(((0.00053734818750772)*cj0*px*(r02*r02)))+(((4.0)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((0.05482358)*r01*r02*sj0*(px*px)))+(((-0.0900023336)*(px*px)*(r00*r00)))+(((0.000357149629787039)*(cj0*cj0)*(r00*r00)))+(((-0.193)*py*sj0*(pz*pz)*(r01*r01)))+(((-1.0)*(px*px*px*px)*(r02*r02)))+(((-1.13624)*pz*(py*py)*(r01*r01)))+(((4.0)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((-0.193)*sj0*(py*py*py)*(r01*r01))));
op[1]=((((-0.386)*r01*r02*(py*py*py)*(sj0*sj0)))+(((0.21929432)*px*py*r00*r01*(sj0*sj0)))+(((0.00214939275003088)*cj0*pz*r00*r01*sj0))+(((0.21929432)*px*pz*r00*r02*(cj0*cj0)))+(((2.27248)*px*py*pz*r00*r02*sj0))+(((0.21929432)*cj0*px*py*sj0*(r00*r00)))+(((-2.27248)*pz*r01*r02*sj0*(px*px)))+(((-0.10964716)*(cj0*cj0)*(py*py)*(r00*r00)))+(((-0.21929432)*py*pz*r01*r02))+(((1.13624)*cj0*(px*px*px)*(r00*r00)))+(((0.2855113344)*cj0*py*pz*r00*r01))+(((0.386)*pz*(py*py)*(r02*r02)))+(((-1.13624)*py*sj0*(px*px)*(r01*r01)))+(((0.00056054369371)*(cj0*cj0)*(r00*r00)))+(((1.13624)*cj0*(px*px*px)*(r02*r02)))+(((0.2855113344)*py*pz*sj0*(r02*r02)))+(((0.0014596053192864)*r01*r02*sj0))+(((-1.158)*px*r00*r02*(pz*pz)))+(((1.158)*cj0*py*r00*r02*sj0*(pz*pz)))+(((-0.00287196062498456)*pz*(r02*r02)))+(((-1.158)*cj0*px*r01*r02*sj0*(py*py)))+(((-0.386)*pz*(cj0*cj0)*(py*py)*(r00*r00)))+(((-0.386)*(pz*pz*pz)*(r02*r02)))+(((1.13624)*py*sj0*(px*px)*(r02*r02)))+(((-2.27248)*cj0*pz*r00*r02*(py*py)))+(((-0.00287196062498456)*px*r00*r02))+(((-1.544)*cj0*px*py*pz*sj0*(r02*r02)))+(((2.27248)*cj0*px*(py*py)*(r01*r01)))+(((-0.386)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.386)*cj0*r00*r02*sj0*(py*py*py)))+(((0.386)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((1.13624)*py*sj0*(pz*pz)*(r02*r02)))+(((-0.772)*pz*(py*py)*(r01*r01)))+(((0.386)*r00*r02*(px*px*px)))+(((1.13624)*py*sj0*(pz*pz)*(r01*r01)))+(((0.00845398067495455)*px*r00*r01*sj0))+(((-0.386)*r00*r02*(cj0*cj0)*(px*px*px)))+(((-0.00316350520504545)*cj0*px*(r02*r02)))+(((0.00107469637501544)*pz*(r01*r01)*(sj0*sj0)))+(((0.21929432)*cj0*py*pz*r00*r02*sj0))+(((-0.00287196062498456)*py*r01*r02))+(((1.13624)*sj0*(py*py*py)*(r01*r01)))+(((0.386)*cj0*r01*r02*sj0*(px*px*px)))+(((-0.772)*px*r00*r02*(py*py)*(sj0*sj0)))+(((1.13624)*cj0*py*r00*r01*(pz*pz)))+(((0.00107469637501544)*pz*(cj0*cj0)*(r00*r00)))+(((-1.13624)*cj0*r00*r01*(py*py*py)))+(((-0.772)*py*r01*r02*(cj0*cj0)*(px*px)))+(((0.21929432)*cj0*px*pz*r01*r02*sj0))+(((0.386)*py*r01*r02*(px*px)*(sj0*sj0)))+(((-0.772)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((0.772)*px*py*pz*r00*r01*(sj0*sj0)))+(((-1.13624)*r00*r01*sj0*(px*px*px)))+(((-0.00107469637501544)*cj0*py*r00*r02*sj0))+(((-0.00316350520504545)*py*sj0*(r02*r02)))+(((0.10964716)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-0.10964716)*(px*px)*(r01*r01)*(sj0*sj0)))+(((1.158)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((1.13624)*px*r00*r01*sj0*(pz*pz)))+(((0.2855113344)*cj0*px*pz*(r02*r02)))+(((-0.386)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((-1.13624)*cj0*px*(py*py)*(r00*r00)))+(((-1.544)*px*py*pz*r00*r01))+(((0.386)*px*r00*r02*(cj0*cj0)*(py*py)))+(((0.00845398067495455)*py*sj0*(r01*r01)))+(((-0.772)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((-0.10964716)*(pz*pz)*(r02*r02)))+(((0.0014596053192864)*cj0*r00*r02))+(((3.40872)*px*r00*r01*sj0*(py*py)))+(((2.27248)*py*sj0*(px*px)*(r00*r00)))+(((1.158)*cj0*px*r01*r02*sj0*(pz*pz)))+(((-0.2855113344)*r01*r02*sj0*(px*px)))+(((-0.386)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((0.386)*py*r01*r02*(px*px)))+(((0.772)*cj0*px*py*pz*sj0*(r00*r00)))+(((0.772)*px*py*pz*r00*r01*(cj0*cj0)))+(((0.00845398067495455)*cj0*py*r00*r01))+(((0.10964716)*(px*px)*(r02*r02)))+(((0.21929432)*py*pz*r01*r02*(sj0*sj0)))+(((-0.10964716)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((1.13624)*cj0*px*(py*py)*(r02*r02)))+(((0.00112108738742)*cj0*r00*r01*sj0))+(((-0.2855113344)*cj0*r00*r02*(py*py)))+(((0.386)*r01*r02*(py*py*py)))+(((-0.772)*pz*(px*px)*(r00*r00)))+(((0.386)*px*r00*r02*(py*py)))+(((-0.00107469637501544)*py*r01*r02*(sj0*sj0)))+(((2.27248)*cj0*px*py*pz*r01*r02))+(((-0.21929432)*px*pz*r00*r02))+(((1.13624)*cj0*px*(pz*pz)*(r00*r00)))+(((-0.10964716)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((1.13624)*sj0*(py*py*py)*(r02*r02)))+(((0.2855113344)*cj0*px*pz*(r00*r00)))+(((-1.158)*py*r01*r02*(pz*pz)))+(((3.40872)*cj0*py*r00*r01*(px*px)))+(((0.21929432)*cj0*px*py*sj0*(r01*r01)))+(((-0.00107469637501544)*px*r00*r02*(cj0*cj0)))+(((0.01161748588)*cj0*pz*r00*r02))+(((-1.158)*cj0*py*r00*r02*sj0*(px*px)))+(((0.2855113344)*py*pz*sj0*(r01*r01)))+(((0.386)*pz*(px*px)*(r02*r02)))+(((0.2855113344)*px*pz*r00*r01*sj0))+(((0.2855113344)*px*py*r00*r02*sj0))+(((0.10964716)*(cj0*cj0)*(px*px)*(r00*r00)))+(((0.01161748588)*pz*r01*r02*sj0))+(((-0.21929432)*cj0*r00*r01*sj0*(pz*pz)))+(((1.13624)*cj0*px*(pz*pz)*(r02*r02)))+(((0.386)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((1.158)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((0.10964716)*(py*py)*(r02*r02)))+(((0.00056054369371)*(r01*r01)*(sj0*sj0)))+(((0.21929432)*px*py*r00*r01*(cj0*cj0)))+(((-0.00056054369371)*(r02*r02)))+(((-0.772)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((0.2855113344)*cj0*px*py*r01*r02))+(((0.00845398067495455)*cj0*px*(r00*r00)))+(((-0.00107469637501544)*cj0*px*r01*r02*sj0))+(((0.772)*cj0*px*py*pz*sj0*(r01*r01))));
op[2]=((((-0.15389241719984)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-0.27053583440032)*cj0*py*pz*r00*r02*sj0))+(((8.0)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((-24.0)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((-8.0)*px*r00*r02*(pz*pz*pz)))+(((8.0)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((-0.27437458440016)*(px*px)*(r02*r02)))+(((-0.000745306059712322)*(r01*r01)*(sj0*sj0)))+(((-0.00149061211942464)*cj0*r00*r01*sj0))+(((-24.0)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((8.0)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((0.00168163108113)*cj0*r00*r02))+(((0.18873983440032)*px*pz*r00*r02))+(((8.0)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((0.27053583440032)*cj0*r00*r01*sj0*(pz*pz)))+(((-2.0)*(px*px*px*px)*(r02*r02)))+(((-2.0)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-2.0)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((0.32894148)*cj0*py*pz*r00*r01))+(((-4.0)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((-0.30778483439968)*cj0*px*py*sj0*(r01*r01)))+(((4.0)*(px*px)*(pz*pz)*(r02*r02)))+(((-0.3600093344)*px*py*r00*r01))+(((8.0)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((-0.32894148)*cj0*r00*r02*(py*py)))+(((-0.000745306059712322)*(cj0*cj0)*(r00*r00)))+(((0.32894148)*cj0*px*pz*(r02*r02)))+(((-24.0)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((-0.30778483439968)*px*py*r00*r01*(sj0*sj0)))+(((-8.0)*(px*px)*(pz*pz)*(r00*r00)))+(((-4.0)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((8.0)*pz*r01*r02*(py*py*py)))+(((8.0)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((-0.30778483439968)*cj0*px*py*sj0*(r00*r00)))+(((-8.0)*py*r01*r02*(pz*pz*pz)))+(((0.32894148)*px*py*r00*r02*sj0))+(((-2.0)*(pz*pz*pz*pz)*(r02*r02)))+(((-8.0)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((8.0)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((-2.0)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((-0.1800046672)*(py*py)*(r01*r01)))+(((-8.0)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((0.15389241719984)*(cj0*cj0)*(py*py)*(r00*r00)))+(((-2.0)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((-8.0)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-8.0)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((-0.27437458440016)*(py*py)*(r02*r02)))+(((0.32894148)*cj0*px*pz*(r00*r00)))+(((-0.32894148)*r01*r02*sj0*(px*px)))+(((-4.0)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-16.0)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((-2.0)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((-4.0)*(px*px)*(py*py)*(r02*r02)))+(((-0.27053583440032)*cj0*px*pz*r01*r02*sj0))+(((8.0)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((4.0)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.00168163108113)*r01*r02*sj0))+(((8.0)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((4.0)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((8.0)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((0.32894148)*cj0*px*py*r01*r02))+(((0.13526791720016)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-8.0)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((-2.0)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((-0.1800046672)*(px*px)*(r00*r00)))+(((-8.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((0.32894148)*py*pz*sj0*(r01*r01)))+(((8.0)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((4.0)*cj0*r00*r01*sj0*(px*px*px*px)))+(((0.09436991720016)*(pz*pz)*(r02*r02)))+(((4.0)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((-16.0)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((8.0)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((-0.01862449999968)*(cj0*cj0)*(px*px)*(r02*r02)))+(((8.0)*py*pz*r01*r02*(px*px)))+(((-0.03724899999936)*cj0*px*py*sj0*(r02*r02)))+(((0.15389241719984)*(px*px)*(r01*r01)*(sj0*sj0)))+(((-16.0)*px*py*r00*r01*(pz*pz)))+(((-2.0)*(py*py*py*py)*(r02*r02)))+(((4.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((4.0)*cj0*r00*r01*sj0*(py*py*py*py)))+(((8.0)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((-16.0)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((8.0)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((-0.15389241719984)*(cj0*cj0)*(px*px)*(r00*r00)))+(((8.0)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((8.0)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((0.18873983440032)*py*pz*r01*r02))+(((0.13526791720016)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((8.0)*pz*r00*r02*(px*px*px)))+(((0.00144410191921728)*(r02*r02)))+(((8.0)*px*pz*r00*r02*(py*py)))+(((-8.0)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((-0.27053583440032)*px*pz*r00*r02*(cj0*cj0)))+(((-8.0)*(py*py)*(pz*pz)*(r01*r01)))+(((4.0)*(py*py)*(pz*pz)*(r02*r02)))+(((-0.30778483439968)*px*py*r00*r01*(cj0*cj0)))+(((-8.0)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((-0.27053583440032)*py*pz*r01*r02*(sj0*sj0)))+(((-8.0)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((0.32894148)*py*pz*sj0*(r02*r02)))+(((-8.0)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-0.01862449999968)*(py*py)*(r02*r02)*(sj0*sj0)))+(((0.32894148)*px*pz*r00*r01*sj0)));
op[3]=((((-0.386)*r01*r02*(py*py*py)*(sj0*sj0)))+(((0.00214939275003088)*cj0*pz*r00*r01*sj0))+(((2.27248)*px*py*pz*r00*r02*sj0))+(((0.10964716)*(pz*pz)*(r02*r02)))+(((-2.27248)*pz*r01*r02*sj0*(px*px)))+(((1.13624)*cj0*(px*px*px)*(r00*r00)))+(((0.386)*pz*(py*py)*(r02*r02)))+(((-0.2855113344)*px*pz*r00*r01*sj0))+(((-1.13624)*py*sj0*(px*px)*(r01*r01)))+(((1.13624)*cj0*(px*px*px)*(r02*r02)))+(((-0.2855113344)*cj0*px*py*r01*r02))+(((-1.158)*px*r00*r02*(pz*pz)))+(((1.158)*cj0*py*r00*r02*sj0*(pz*pz)))+(((-0.00287196062498456)*pz*(r02*r02)))+(((0.10964716)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((-1.158)*cj0*px*r01*r02*sj0*(py*py)))+(((-0.386)*pz*(cj0*cj0)*(py*py)*(r00*r00)))+(((-0.386)*(pz*pz*pz)*(r02*r02)))+(((1.13624)*py*sj0*(px*px)*(r02*r02)))+(((-2.27248)*cj0*pz*r00*r02*(py*py)))+(((-0.00287196062498456)*px*r00*r02))+(((-1.544)*cj0*px*py*pz*sj0*(r02*r02)))+(((2.27248)*cj0*px*(py*py)*(r01*r01)))+(((-0.21929432)*px*py*r00*r01*(cj0*cj0)))+(((-0.386)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.2855113344)*px*py*r00*r02*sj0))+(((-0.10964716)*(py*py)*(r01*r01)*(sj0*sj0)))+(((0.386)*cj0*r00*r02*sj0*(py*py*py)))+(((0.386)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((1.13624)*py*sj0*(pz*pz)*(r02*r02)))+(((-0.772)*pz*(py*py)*(r01*r01)))+(((0.386)*r00*r02*(px*px*px)))+(((1.13624)*py*sj0*(pz*pz)*(r01*r01)))+(((0.10964716)*(px*px)*(r01*r01)*(sj0*sj0)))+(((0.00845398067495455)*px*r00*r01*sj0))+(((-0.386)*r00*r02*(cj0*cj0)*(px*px*px)))+(((-0.00112108738742)*cj0*r00*r01*sj0))+(((-0.00316350520504545)*cj0*px*(r02*r02)))+(((-0.2855113344)*cj0*px*pz*(r00*r00)))+(((0.00107469637501544)*pz*(r01*r01)*(sj0*sj0)))+(((-0.00287196062498456)*py*r01*r02))+(((1.13624)*sj0*(py*py*py)*(r01*r01)))+(((0.386)*cj0*r01*r02*sj0*(px*px*px)))+(((-0.772)*px*r00*r02*(py*py)*(sj0*sj0)))+(((1.13624)*cj0*py*r00*r01*(pz*pz)))+(((0.00107469637501544)*pz*(cj0*cj0)*(r00*r00)))+(((-0.10964716)*(px*px)*(r02*r02)))+(((-0.00056054369371)*(r01*r01)*(sj0*sj0)))+(((0.2855113344)*cj0*r00*r02*(py*py)))+(((-1.13624)*cj0*r00*r01*(py*py*py)))+(((-0.772)*py*r01*r02*(cj0*cj0)*(px*px)))+(((0.386)*py*r01*r02*(px*px)*(sj0*sj0)))+(((-0.772)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((0.772)*px*py*pz*r00*r01*(sj0*sj0)))+(((-0.21929432)*py*pz*r01*r02*(sj0*sj0)))+(((-1.13624)*r00*r01*sj0*(px*px*px)))+(((-0.00107469637501544)*cj0*py*r00*r02*sj0))+(((-0.00316350520504545)*py*sj0*(r02*r02)))+(((0.2855113344)*r01*r02*sj0*(px*px)))+(((-0.0014596053192864)*cj0*r00*r02))+(((-0.21929432)*cj0*px*pz*r01*r02*sj0))+(((-0.21929432)*px*pz*r00*r02*(cj0*cj0)))+(((1.158)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((0.10964716)*(cj0*cj0)*(py*py)*(r00*r00)))+(((1.13624)*px*r00*r01*sj0*(pz*pz)))+(((-0.386)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((-1.13624)*cj0*px*(py*py)*(r00*r00)))+(((-1.544)*px*py*pz*r00*r01))+(((0.386)*px*r00*r02*(cj0*cj0)*(py*py)))+(((0.00845398067495455)*py*sj0*(r01*r01)))+(((-0.2855113344)*cj0*py*pz*r00*r01))+(((-0.2855113344)*py*pz*sj0*(r01*r01)))+(((0.00056054369371)*(r02*r02)))+(((-0.772)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((-0.10964716)*(py*py)*(r02*r02)))+(((3.40872)*px*r00*r01*sj0*(py*py)))+(((2.27248)*py*sj0*(px*px)*(r00*r00)))+(((1.158)*cj0*px*r01*r02*sj0*(pz*pz)))+(((-0.386)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((0.21929432)*py*pz*r01*r02))+(((0.386)*py*r01*r02*(px*px)))+(((0.772)*cj0*px*py*pz*sj0*(r00*r00)))+(((0.772)*px*py*pz*r00*r01*(cj0*cj0)))+(((0.00845398067495455)*cj0*py*r00*r01))+(((-0.21929432)*cj0*px*py*sj0*(r01*r01)))+(((1.13624)*cj0*px*(py*py)*(r02*r02)))+(((-0.10964716)*(cj0*cj0)*(px*px)*(r00*r00)))+(((0.386)*r01*r02*(py*py*py)))+(((-0.772)*pz*(px*px)*(r00*r00)))+(((0.386)*px*r00*r02*(py*py)))+(((-0.00107469637501544)*py*r01*r02*(sj0*sj0)))+(((0.21929432)*cj0*r00*r01*sj0*(pz*pz)))+(((2.27248)*cj0*px*py*pz*r01*r02))+(((1.13624)*cj0*px*(pz*pz)*(r00*r00)))+(((1.13624)*sj0*(py*py*py)*(r02*r02)))+(((-1.158)*py*r01*r02*(pz*pz)))+(((3.40872)*cj0*py*r00*r01*(px*px)))+(((-0.00107469637501544)*px*r00*r02*(cj0*cj0)))+(((-0.21929432)*px*py*r00*r01*(sj0*sj0)))+(((-0.2855113344)*cj0*px*pz*(r02*r02)))+(((0.01161748588)*cj0*pz*r00*r02))+(((-1.158)*cj0*py*r00*r02*sj0*(px*px)))+(((0.386)*pz*(px*px)*(r02*r02)))+(((0.10964716)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.01161748588)*pz*r01*r02*sj0))+(((-0.00056054369371)*(cj0*cj0)*(r00*r00)))+(((1.13624)*cj0*px*(pz*pz)*(r02*r02)))+(((-0.21929432)*cj0*px*py*sj0*(r00*r00)))+(((0.21929432)*px*pz*r00*r02))+(((0.386)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((-0.21929432)*cj0*py*pz*r00*r02*sj0))+(((1.158)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((-0.772)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((0.00845398067495455)*cj0*px*(r00*r00)))+(((-0.00107469637501544)*cj0*px*r01*r02*sj0))+(((0.772)*cj0*px*py*pz*sj0*(r01*r01)))+(((-0.2855113344)*py*pz*sj0*(r02*r02)))+(((-0.0014596053192864)*r01*r02*sj0)));
op[4]=((((-0.386)*pz*r01*r02*sj0*(px*px)))+(((-1.0)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.00422699033747728)*px*r00*r02))+(((0.13161891720016)*cj0*px*py*sj0*(r01*r01)))+(((-4.0)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((0.193)*sj0*(py*py*py)*(r02*r02)))+(((-1.13624)*cj0*px*py*pz*sj0*(r00*r00)))+(((0.06580945860008)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-12.0)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((1.13624)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((-4.0)*(px*px)*(pz*pz)*(r00*r00)))+(((0.386)*cj0*px*py*pz*r01*r02))+(((0.193)*py*sj0*(px*px)*(r02*r02)))+(((0.00158175260252272)*py*r01*r02*(sj0*sj0)))+(((1.13624)*py*r01*r02*(cj0*cj0)*(px*px)))+(((0.06580945860008)*(cj0*cj0)*(px*px)*(r00*r00)))+(((0.0019733285)*pz*r01*r02*sj0))+(((-0.00053734818750772)*cj0*px*(r02*r02)))+(((-0.05482358)*cj0*px*pz*(r00*r00)))+(((-0.56812)*cj0*r01*r02*sj0*(px*px*px)))+(((-0.00053734818750772)*py*sj0*(r02*r02)))+(((0.00143598031249228)*cj0*px*(r00*r00)))+(((-0.000280271846855)*cj0*r00*r02))+(((0.00158175260252272)*cj0*px*r01*r02*sj0))+(((-0.05482358)*py*pz*sj0*(r02*r02)))+(((-12.0)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((-1.70436)*cj0*py*r00*r02*sj0*(pz*pz)))+(((-0.56812)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((2.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((4.0)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((-0.05482358)*cj0*py*pz*r00*r01))+(((-0.05482358)*px*pz*r00*r01*sj0))+(((4.0)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((4.0)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((0.13161891720016)*px*py*r00*r01*(sj0*sj0)))+(((4.0)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((0.00158175260252272)*px*r00*r02*(cj0*cj0)))+(((-0.56812)*pz*(px*px)*(r02*r02)))+(((-8.0)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((0.15024341719984)*cj0*px*pz*r01*r02*sj0))+(((4.0)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((-1.13624)*px*py*pz*r00*r01*(sj0*sj0)))+(((0.193)*cj0*px*(py*py)*(r02*r02)))+(((0.000357149629787039)*(r01*r01)*(sj0*sj0)))+(((-0.56812)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((-2.0)*(px*px)*(py*py)*(r02*r02)))+(((-8.0)*px*py*r00*r01*(pz*pz)))+(((1.13624)*pz*(py*py)*(r01*r01)))+(((0.56812)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((-0.56812)*px*r00*r02*(cj0*cj0)*(py*py)))+(((0.193)*cj0*px*(pz*pz)*(r02*r02)))+(((4.0)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((0.579)*px*r00*r01*sj0*(py*py)))+(((0.193)*py*sj0*(pz*pz)*(r02*r02)))+(((4.0)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((-0.07512170859992)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.00422699033747728)*py*r01*r02))+(((4.0)*pz*r01*r02*(py*py*py)))+(((-1.0)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((0.00556837499992)*(py*py)*(r02*r02)))+(((0.193)*cj0*px*(pz*pz)*(r00*r00)))+(((-0.05482358)*cj0*px*pz*(r02*r02)))+(((-0.00158175260252272)*pz*(cj0*cj0)*(r00*r00)))+(((-4.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((-0.386)*cj0*pz*r00*r02*(py*py)))+(((-0.01862449999968)*cj0*px*py*sj0*(r02*r02)))+(((-0.06580945860008)*(px*px)*(r01*r01)*(sj0*sj0)))+(((0.386)*py*sj0*(px*px)*(r00*r00)))+(((-2.0)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.56812)*r01*r02*(py*py*py)))+(((-0.00931224999984)*(cj0*cj0)*(px*px)*(r02*r02)))+(((0.15024341719984)*px*pz*r00*r02*(cj0*cj0)))+(((-4.0)*py*r01*r02*(pz*pz*pz)))+(((-0.1800046672)*px*py*r00*r01))+(((2.0)*cj0*r00*r01*sj0*(py*py*py*py)))+(((-1.0)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((2.0)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((-1.0)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((-0.56812)*px*r00*r02*(py*py)))+(((4.0)*py*pz*r01*r02*(px*px)))+(((-0.193)*cj0*px*(py*py)*(r00*r00)))+(((0.56812)*r01*r02*(py*py*py)*(sj0*sj0)))+(((4.0)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((-0.05482358)*px*py*r00*r02*sj0))+(((-0.05482358)*py*pz*sj0*(r01*r01)))+(((4.0)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((0.193)*px*r00*r01*sj0*(pz*pz)))+(((-7.75170003456103e-6)*(r02*r02)))+(((-0.56812)*cj0*r00*r02*sj0*(py*py*py)))+(((4.0)*pz*r00*r02*(px*px*px)))+(((-8.0)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((-0.000280271846855)*r01*r02*sj0))+(((-2.0)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((0.386)*px*py*pz*r00*r02*sj0))+(((1.13624)*px*r00*r02*(py*py)*(sj0*sj0)))+(((0.00143598031249228)*py*sj0*(r01*r01)))+(((-1.70436)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((-4.0)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-0.0900023336)*(py*py)*(r01*r01)))+(((0.15024341719984)*cj0*py*pz*r00*r02*sj0))+(((-4.0)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((-1.0)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((-8.0)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((2.27248)*cj0*px*py*pz*sj0*(r02*r02)))+(((0.00422699033747728)*pz*(r02*r02)))+(((-0.09557070859992)*(pz*pz)*(r02*r02)))+(((-0.00158175260252272)*pz*(r01*r01)*(sj0*sj0)))+(((2.0)*(px*px)*(pz*pz)*(r02*r02)))+(((-4.0)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((-1.70436)*cj0*px*r01*r02*sj0*(pz*pz)))+(((-1.0)*(py*py*py*py)*(r02*r02)))+(((-1.13624)*cj0*px*py*pz*sj0*(r01*r01)))+(((-0.56812)*r00*r02*(px*px*px)))+(((-0.56812)*py*r01*r02*(px*px)))+(((1.70436)*px*r00*r02*(pz*pz)))+(((2.0)*cj0*r00*r01*sj0*(px*px*px*px)))+(((-0.56812)*py*r01*r02*(px*px)*(sj0*sj0)))+(((-0.00316350520504545)*cj0*pz*r00*r01*sj0))+(((0.00143598031249228)*cj0*py*r00*r01))+(((-2.0)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((0.13161891720016)*cj0*px*py*sj0*(r00*r00)))+(((-0.06580945860008)*(cj0*cj0)*(py*py)*(r00*r00)))+(((0.386)*cj0*px*(py*py)*(r01*r01)))+(((0.00158175260252272)*cj0*py*r00*r02*sj0))+(((0.56812)*pz*(cj0*cj0)*(py*py)*(r00*r00)))+(((1.13624)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((0.15024341719984)*py*pz*r01*r02*(sj0*sj0)))+(((-1.70436)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((1.70436)*py*r01*r02*(pz*pz)))+(((0.56812)*r00*r02*(cj0*cj0)*(px*px*px)))+(((0.56812)*(pz*pz*pz)*(r02*r02)))+(((1.13624)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((0.193)*sj0*(py*py*py)*(r01*r01)))+(((-4.0)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((-4.0)*(py*py)*(pz*pz)*(r01*r01)))+(((-1.0)*(pz*pz*pz*pz)*(r02*r02)))+(((4.0)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((-0.193)*py*sj0*(px*px)*(r01*r01)))+(((-0.193)*cj0*r00*r01*(py*py*py)))+(((-0.07512170859992)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((-0.19114141719984)*py*pz*r01*r02))+(((-4.0)*px*r00*r02*(pz*pz*pz)))+(((0.193)*cj0*(px*px*px)*(r02*r02)))+(((-0.56812)*pz*(py*py)*(r02*r02)))+(((0.56812)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.00143598031249228)*px*r00*r01*sj0))+(((-1.0)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((0.05482358)*cj0*r00*r02*(py*py)))+(((4.0)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((-0.19114141719984)*px*pz*r00*r02))+(((4.0)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((-0.00931224999984)*(py*py)*(r02*r02)*(sj0*sj0)))+(((4.0)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((0.193)*cj0*(px*px*px)*(r00*r00)))+(((4.0)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((1.13624)*pz*(px*px)*(r00*r00)))+(((0.13161891720016)*px*py*r00*r01*(cj0*cj0)))+(((4.0)*px*pz*r00*r02*(py*py)))+(((2.0)*(py*py)*(pz*pz)*(r02*r02)))+(((0.193)*py*sj0*(pz*pz)*(r01*r01)))+(((-0.05482358)*cj0*px*py*r01*r02))+(((2.0)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.000714299259574078)*cj0*r00*r01*sj0))+(((-0.15024341719984)*cj0*r00*r01*sj0*(pz*pz)))+(((-4.0)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((-4.0)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((-1.13624)*px*py*pz*r00*r01*(cj0*cj0)))+(((0.579)*cj0*py*r00*r01*(px*px)))+(((-4.0)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((0.56812)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((-12.0)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((1.70436)*cj0*py*r00*r02*sj0*(px*px)))+(((2.0)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-4.0)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((0.193)*cj0*py*r00*r01*(pz*pz)))+(((0.00556837499992)*(px*px)*(r02*r02)))+(((4.0)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((0.05482358)*r01*r02*sj0*(px*px)))+(((2.27248)*px*py*pz*r00*r01))+(((-0.0900023336)*(px*px)*(r00*r00)))+(((0.000357149629787039)*(cj0*cj0)*(r00*r00)))+(((-0.193)*r00*r01*sj0*(px*px*px)))+(((1.70436)*cj0*px*r01*r02*sj0*(py*py)))+(((-1.0)*(px*px*px*px)*(r02*r02)))+(((0.0019733285)*cj0*pz*r00*r02))+(((4.0)*cj0*py*sj0*(px*px*px)*(r01*r01))));
polyroots4(op,zeror,numroots);
IkReal j1array[4], cj1array[4], sj1array[4], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[4]={true,true,true,true};
_nj1 = 4;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=(((r00*sj0))+(((-1.0)*cj0*r01)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j3eval[2];
j3eval[0]=cj4;
j3eval[1]=IKsign(cj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x34=(cj0*px);
IkReal x35=((4.75128617069989)*cj1);
IkReal x36=((13.9860139860001)*sj1);
IkReal x37=(py*sj0);
if( (((0.137082606897156)+((x35*x37))+((x34*x35))+((x34*x36))+((x36*x37))+(((-49.2361261212424)*(py*py)))+(((-49.2361261212424)*(px*px)))+(((13.9860139860001)*cj1*pz))+(((-49.2361261212424)*(pz*pz)))+(((-4.75128617069989)*pz*sj1)))) < -1-IKFAST_SINCOS_THRESH || (((0.137082606897156)+((x35*x37))+((x34*x35))+((x34*x36))+((x36*x37))+(((-49.2361261212424)*(py*py)))+(((-49.2361261212424)*(px*px)))+(((13.9860139860001)*cj1*pz))+(((-49.2361261212424)*(pz*pz)))+(((-4.75128617069989)*pz*sj1)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x38=IKasin(((0.137082606897156)+((x35*x37))+((x34*x35))+((x34*x36))+((x36*x37))+(((-49.2361261212424)*(py*py)))+(((-49.2361261212424)*(px*px)))+(((13.9860139860001)*cj1*pz))+(((-49.2361261212424)*(pz*pz)))+(((-4.75128617069989)*pz*sj1))));
j3array[0]=((3.14159124543659)+(((-1.0)*x38)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((6.28318389902638)+x38);
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x39=py*py;
IkReal x40=pz*pz;
IkReal x41=px*px;
IkReal x42=(px*sj0);
IkReal x43=((2.0)*py);
IkReal x44=(cj0*py);
IkReal x45=((0.0965)*r01);
IkReal x46=(cj0*pz);
IkReal x47=((0.28406)*cj1);
IkReal x48=(py*r00);
IkReal x49=((0.28406)*sj1);
IkReal x50=(r00*sj0);
IkReal x51=(cj0*r01);
IkReal x52=((0.0965)*r02*sj1);
IkReal x53=((1.0)*x51);
evalcond[0]=((-0.02528477090004)+(((0.0965)*pz*sj1*x50))+((px*r01*x49))+((x39*x51))+((x39*x50))+(((-1.0)*x40*x53))+(((-1.0)*x41*x53))+(((-1.0)*x48*x49))+(((-2.0)*pz*r02*x42))+(((-1.0)*r02*x44*x47))+(((-1.0)*x42*x52))+(((-1.0)*sj1*x45*x46))+((x44*x52))+((cj0*px*r00*x43))+(((-0.0225005834)*x51))+(((-1.0)*x41*x50))+((cj1*px*x45))+(((0.0225005834)*x50))+((x40*x50))+(((0.02031029)*(IKsin(j3))))+(((-1.0)*r01*x42*x43))+((r01*x46*x47))+(((-1.0)*pz*x47*x50))+((r02*x42*x47))+(((2.86e-8)*(IKcos(j3))))+(((-0.0965)*cj1*x48))+((r02*x43*x46)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-884082.898602797)+cj3+(((710150.0)*sj3)));
j2eval[1]=IKsign(((-0.02528477090004)+(((2.86e-8)*cj3))+(((0.02031029)*sj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x54=((2.0e-7)*pz);
IkReal x55=((0.14203)*sj1);
IkReal x56=(py*sj0);
IkReal x57=(cj1*pz);
IkReal x58=((0.0715)*sj3);
IkReal x59=(cj0*px);
IkReal x60=((2.0e-7)*sj1);
IkReal x61=((0.0715)*cj3);
IkReal x62=((0.14203)*cj1);
IkReal x63=((2.0e-7)*cj1);
IkReal x64=(pz*sj1);
IkReal x65=((0.0715)*sj1*x59);
CheckValue<IkReal> x66=IKPowWithIntegerCheck(IKsign(((-0.02528477090004)+(((2.86e-8)*cj3))+(((0.02031029)*sj3)))),-1);
if(!x66.valid){
continue;
}
CheckValue<IkReal> x67 = IKatan2WithCheck(IkReal(((-0.02017251125)+(((-1.0)*sj1*x58*x59))+(((-1.0)*x56*x63))+(((-1.0)*x61*x64))+((sj1*x54))+((cj1*x56*x61))+(((-1.0)*sj1*x56*x58))+(((0.010155145)*sj3))+(((-1.0)*x59*x63))+((cj1*x59*x61))+(((0.14203)*x57))+(((-0.003449875)*cj3))+(((-1.0)*x57*x58))+((x55*x59))+((x55*x56)))),IkReal(((0.006852975906)+(((-1.0)*x56*x60))+(((-1.0)*x56*x62))+((sj1*x59*x61))+(((-0.003449875)*sj3))+(((-0.010155145)*cj3))+((cj1*x56*x58))+((cj1*x58*x59))+(((-1.0)*x59*x62))+(((-1.0)*x59*x60))+((x57*x61))+(((-1.0)*x58*x64))+((sj1*x56*x61))+((pz*x55))+(((-1.0)*cj1*x54)))),IKFAST_ATAN2_MAGTHRESH);
if(!x67.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x66.value)))+(x67.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x68=IKcos(j2);
IkReal x69=IKsin(j2);
IkReal x70=(px*sj1);
IkReal x71=(py*sj1);
IkReal x72=(cj1*sj0);
IkReal x73=((1.0)*px);
IkReal x74=(pz*r00);
IkReal x75=((1.0)*r01);
IkReal x76=(cj0*r01);
IkReal x77=(pz*sj1);
IkReal x78=(r00*sj0);
IkReal x79=(cj0*cj1);
IkReal x80=((0.14203)*x69);
IkReal x81=((2.0e-7)*x68);
IkReal x82=((2.0e-7)*x69);
IkReal x83=((0.14203)*x68);
IkReal x84=((0.0715)*x69);
IkReal x85=((0.0715)*x68);
IkReal x86=(cj3*x85);
IkReal x87=(sj3*x84);
IkReal x88=(sj3*x85);
IkReal x89=(cj3*x84);
IkReal x90=(x82+x83);
IkReal x91=(x81+x87);
IkReal x92=(x80+x86);
IkReal x93=(x88+x89);
evalcond[0]=((-0.14203)+((cj0*x70))+((cj1*pz))+x92+((sj0*x71))+(((-1.0)*x91)));
evalcond[1]=((0.04825)+x77+x90+(((-1.0)*x93))+(((-1.0)*x73*x79))+(((-1.0)*py*x72)));
evalcond[2]=((((-1.0)*x70*x75))+x92+(((-1.0)*pz*x75*x79))+(((-0.14203)*x78))+(((-1.0)*x91))+((x72*x74))+((py*r02*x79))+(((0.14203)*x76))+(((-1.0)*r02*x72*x73))+((r00*x71)));
evalcond[3]=((((-1.0)*cj1*r01*x73))+(((-0.04825)*x78))+((cj1*py*r00))+x93+((x76*x77))+(((-1.0)*sj0*sj1*x74))+((r02*sj0*x70))+(((-1.0)*x90))+(((-1.0)*cj0*r02*x71))+(((0.04825)*x76)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x94=(cj0*px);
IkReal x95=((4.75128617069989)*cj1);
IkReal x96=((13.9860139860001)*sj1);
IkReal x97=(py*sj0);
if( (((0.137082606897156)+((x96*x97))+(((-49.2361261212424)*(py*py)))+(((-49.2361261212424)*(px*px)))+(((13.9860139860001)*cj1*pz))+((x95*x97))+(((-49.2361261212424)*(pz*pz)))+(((-4.75128617069989)*pz*sj1))+((x94*x96))+((x94*x95)))) < -1-IKFAST_SINCOS_THRESH || (((0.137082606897156)+((x96*x97))+(((-49.2361261212424)*(py*py)))+(((-49.2361261212424)*(px*px)))+(((13.9860139860001)*cj1*pz))+((x95*x97))+(((-49.2361261212424)*(pz*pz)))+(((-4.75128617069989)*pz*sj1))+((x94*x96))+((x94*x95)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x98=IKasin(((0.137082606897156)+((x96*x97))+(((-49.2361261212424)*(py*py)))+(((-49.2361261212424)*(px*px)))+(((13.9860139860001)*cj1*pz))+((x95*x97))+(((-49.2361261212424)*(pz*pz)))+(((-4.75128617069989)*pz*sj1))+((x94*x96))+((x94*x95))));
j3array[0]=((3.14159124543659)+(((-1.0)*x98)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((6.28318389902638)+x98);
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x99=py*py;
IkReal x100=pz*pz;
IkReal x101=px*px;
IkReal x102=(px*sj0);
IkReal x103=((2.0)*py);
IkReal x104=(cj0*py);
IkReal x105=((0.0965)*r01);
IkReal x106=(cj0*pz);
IkReal x107=((0.28406)*cj1);
IkReal x108=(py*r00);
IkReal x109=((0.28406)*sj1);
IkReal x110=(r00*sj0);
IkReal x111=(cj0*r01);
IkReal x112=((0.0965)*r02*sj1);
IkReal x113=((1.0)*x111);
evalcond[0]=((0.02528477090004)+((x100*x110))+(((-0.0965)*cj1*x108))+((r01*x106*x107))+(((-1.0)*sj1*x105*x106))+(((-0.0225005834)*x111))+(((-1.0)*x100*x113))+(((-1.0)*x101*x113))+(((0.0965)*pz*sj1*x110))+(((-2.86e-8)*(IKcos(j3))))+((px*r01*x109))+(((-1.0)*x108*x109))+((cj1*px*x105))+(((-1.0)*r01*x102*x103))+(((-1.0)*x101*x110))+(((-2.0)*pz*r02*x102))+((x111*x99))+((cj0*px*r00*x103))+((x104*x112))+(((-0.02031029)*(IKsin(j3))))+(((-1.0)*x102*x112))+((r02*x102*x107))+(((-1.0)*r02*x104*x107))+(((-1.0)*pz*x107*x110))+((r02*x103*x106))+((x110*x99))+(((0.0225005834)*x110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-884082.898602797)+cj3+(((710150.0)*sj3)));
j2eval[1]=IKsign(((-0.02528477090004)+(((2.86e-8)*cj3))+(((0.02031029)*sj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x114=((2.0e-7)*pz);
IkReal x115=((0.14203)*sj1);
IkReal x116=(py*sj0);
IkReal x117=(cj1*pz);
IkReal x118=((0.0715)*sj3);
IkReal x119=(cj0*px);
IkReal x120=((2.0e-7)*sj1);
IkReal x121=((0.0715)*cj3);
IkReal x122=((0.14203)*cj1);
IkReal x123=((2.0e-7)*cj1);
IkReal x124=(pz*sj1);
IkReal x125=((0.0715)*sj1*x119);
CheckValue<IkReal> x126=IKPowWithIntegerCheck(IKsign(((-0.02528477090004)+(((2.86e-8)*cj3))+(((0.02031029)*sj3)))),-1);
if(!x126.valid){
continue;
}
CheckValue<IkReal> x127 = IKatan2WithCheck(IkReal(((-0.02017251125)+((sj1*x114))+(((-1.0)*x119*x123))+(((-1.0)*x117*x118))+(((-1.0)*x116*x123))+(((0.010155145)*sj3))+(((0.14203)*x117))+((cj1*x119*x121))+((cj1*x116*x121))+(((-1.0)*x121*x124))+(((-1.0)*sj1*x116*x118))+((x115*x119))+((x115*x116))+(((-0.003449875)*cj3))+(((-1.0)*sj1*x118*x119)))),IkReal(((0.006852975906)+(((-1.0)*x119*x120))+(((-1.0)*x119*x122))+((x117*x121))+(((-1.0)*x118*x124))+(((-1.0)*cj1*x114))+((pz*x115))+(((-0.003449875)*sj3))+(((-0.010155145)*cj3))+(((-1.0)*x116*x122))+(((-1.0)*x116*x120))+((sj1*x119*x121))+((sj1*x116*x121))+((cj1*x116*x118))+((cj1*x118*x119)))),IKFAST_ATAN2_MAGTHRESH);
if(!x127.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x126.value)))+(x127.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x128=IKcos(j2);
IkReal x129=IKsin(j2);
IkReal x130=(px*sj1);
IkReal x131=(py*sj1);
IkReal x132=(cj1*sj0);
IkReal x133=((1.0)*px);
IkReal x134=(pz*r00);
IkReal x135=((1.0)*r01);
IkReal x136=(cj0*r01);
IkReal x137=(pz*sj1);
IkReal x138=(r00*sj0);
IkReal x139=(cj0*cj1);
IkReal x140=((2.0e-7)*x128);
IkReal x141=((0.14203)*x129);
IkReal x142=((2.0e-7)*x129);
IkReal x143=((0.14203)*x128);
IkReal x144=((0.0715)*x129);
IkReal x145=((0.0715)*x128);
IkReal x146=(sj3*x144);
IkReal x147=(cj3*x145);
IkReal x148=(sj3*x145);
IkReal x149=(cj3*x144);
IkReal x150=(x142+x143);
IkReal x151=(x140+x146);
IkReal x152=(x141+x147);
IkReal x153=(x148+x149);
evalcond[0]=((-0.14203)+(((-1.0)*x151))+((cj0*x130))+x152+((cj1*pz))+((sj0*x131)));
evalcond[1]=((0.04825)+(((-1.0)*x153))+(((-1.0)*x133*x139))+x150+x137+(((-1.0)*py*x132)));
evalcond[2]=((((-1.0)*r02*x132*x133))+(((-1.0)*x152))+((py*r02*x139))+(((0.14203)*x136))+((r00*x131))+x151+(((-1.0)*pz*x135*x139))+((x132*x134))+(((-1.0)*x130*x135))+(((-0.14203)*x138)));
evalcond[3]=((((-1.0)*x153))+(((-0.04825)*x138))+((x136*x137))+((cj1*py*r00))+x150+(((-1.0)*cj1*r01*x133))+((r02*sj0*x130))+(((-1.0)*cj0*r02*x131))+(((0.04825)*x136))+(((-1.0)*sj0*sj1*x134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x154=(r01*sj0);
IkReal x155=((171324397650.0)*sj1);
IkReal x156=((504312781250.0)*cj1);
IkReal x157=((171324397650.0)*cj1);
IkReal x158=(cj0*r00);
IkReal x159=((3550750000000.0)*r02);
IkReal x160=(py*sj0);
IkReal x161=(py*r01);
IkReal x162=((504312781250.0)*sj1);
IkReal x163=(px*r00);
IkReal x164=((5000000.0)*pz);
IkReal x165=(cj0*px);
IkReal x166=((3550750000000.0)*pz);
IkReal x167=((5000000.0)*r02);
CheckValue<IkReal> x168=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x168.valid){
continue;
}
CheckValue<IkReal> x169 = IKatan2WithCheck(IkReal(((((-1.0)*x154*x156))+(((-1.0)*x159*x165))+(((-1.0)*x159*x160))+(((-1.0)*r02*x164))+(((253878625000.0)*cj4))+(((-5000000.0)*x161))+(((-5000000.0)*x163))+((x155*x158))+((x154*x155))+((x154*x166))+(((-1.0)*x156*x158))+((x158*x166))+((r02*x157))+((r02*x162)))),IkReal(((((-1.0)*x154*x162))+(((-1.0)*x157*x158))+(((-1.0)*x154*x157))+(((-1.0)*x158*x162))+(((3550750000000.0)*x161))+(((3550750000000.0)*x163))+(((-1.0)*x160*x167))+(((357500.0)*cj4))+(((-1.0)*r02*x156))+((x154*x164))+((x158*x164))+((r02*x155))+(((-1.0)*x165*x167))+((pz*x159)))),IKFAST_ATAN2_MAGTHRESH);
if(!x169.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x168.value)))+(x169.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x170=IKsin(j3);
IkReal x171=IKcos(j3);
IkReal x172=pz*pz;
IkReal x173=py*py;
IkReal x174=px*px;
IkReal x175=(r01*sj0);
IkReal x176=(cj0*px);
IkReal x177=((0.28406)*sj1);
IkReal x178=((0.14203)*sj1);
IkReal x179=(r02*sj1);
IkReal x180=((1.0)*r02);
IkReal x181=((0.0965)*sj0);
IkReal x182=(cj1*py);
IkReal x183=(cj0*r00);
IkReal x184=(cj1*r02);
IkReal x185=((0.0965)*sj1);
IkReal x186=(cj0*r02);
IkReal x187=((0.28406)*cj1);
IkReal x188=(py*sj0);
IkReal x189=(r00*sj0);
IkReal x190=((0.04825)*sj1);
IkReal x191=((0.04825)*cj1);
IkReal x192=((2.0)*pz);
IkReal x193=(px*sj0);
IkReal x194=(cj0*r01);
IkReal x195=(px*r01);
IkReal x196=((0.14203)*cj1);
IkReal x197=((0.0965)*cj1);
IkReal x198=((2.0)*px*py);
IkReal x199=((0.02031029)*x170);
IkReal x200=(pz*x194);
IkReal x201=(cj4*x170);
IkReal x202=((1.0)*x174);
IkReal x203=(cj4*x171);
IkReal x204=((1.0)*x172);
IkReal x205=((2.86e-8)*x171);
evalcond[0]=((((-0.04825)*x179))+((x178*x183))+(((-1.0)*px*r00))+(((-1.0)*pz*x180))+(((0.14203)*x184))+((x175*x191))+((x175*x178))+(((-1.0)*py*r01))+(((-2.0e-7)*x201))+((x183*x191))+(((0.14203)*x203)));
evalcond[1]=((0.00278418750004)+((x177*x188))+((x176*x197))+((pz*x187))+((x176*x177))+(((-1.0)*pz*x185))+(((-1.0)*x199))+(((-1.0)*x173))+(((-1.0)*x205))+(((-1.0)*x202))+(((-1.0)*x204))+((x181*x182)));
evalcond[2]=((((-0.14203)*x201))+((pz*x175))+((pz*x183))+((x175*x190))+(((-1.0)*x180*x188))+(((-1.0)*x176*x180))+(((0.04825)*x184))+(((0.0715)*cj4))+(((-1.0)*x175*x196))+(((-2.0e-7)*x203))+(((-1.0)*x183*x196))+((x183*x190))+((r02*x178)));
evalcond[3]=((((-1.0)*x189*x202))+(((0.28406)*x184*x193))+(((-1.0)*x194*x204))+(((-1.0)*x194*x202))+((x187*x200))+((x172*x189))+((x173*x189))+(((-1.0)*pz*x187*x189))+(((-0.0965)*r00*x182))+((x173*x194))+(((-1.0)*x185*x200))+(((-0.28406)*x182*x186))+((py*x186*x192))+((pz*r00*sj1*x181))+(((0.0965)*cj0*py*x179))+((x195*x197))+((sj4*x199))+(((0.0225005834)*x189))+((sj4*x205))+(((-0.0225005834)*x194))+(((-1.0)*x175*x198))+(((-1.0)*px*x179*x181))+(((2.0)*py*r00*x176))+(((-1.0)*py*r00*x177))+(((-1.0)*r02*x192*x193))+((x177*x195))+(((-0.02528477090004)*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=IKsign(cj4);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x206=(cj4*sj3);
IkReal x207=(cj3*cj4);
j2eval[0]=((((710150.0)*x207))+(((-1.0)*x206)));
j2eval[1]=IKsign(((((-2.0e-7)*x206))+(((0.14203)*x207))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x208=(cj4*sj3);
IkReal x209=(cj3*cj4);
j2eval[0]=((((357500.0)*cj4))+(((-1.0)*x209))+(((-710150.0)*x208)));
j2eval[1]=IKsign(((((-0.14203)*x208))+(((0.0715)*cj4))+(((-2.0e-7)*x209))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-884082.898602797)+cj3+(((710150.0)*sj3)));
j2eval[1]=IKsign(((-0.02528477090004)+(((2.86e-8)*cj3))+(((0.02031029)*sj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x210=((2.0e-7)*pz);
IkReal x211=((0.14203)*sj1);
IkReal x212=(py*sj0);
IkReal x213=(cj1*pz);
IkReal x214=((0.0715)*sj3);
IkReal x215=(cj0*px);
IkReal x216=((2.0e-7)*sj1);
IkReal x217=((0.0715)*cj3);
IkReal x218=((0.14203)*cj1);
IkReal x219=((2.0e-7)*cj1);
IkReal x220=(pz*sj1);
IkReal x221=((0.0715)*sj1*x215);
CheckValue<IkReal> x222=IKPowWithIntegerCheck(IKsign(((-0.02528477090004)+(((2.86e-8)*cj3))+(((0.02031029)*sj3)))),-1);
if(!x222.valid){
continue;
}
CheckValue<IkReal> x223 = IKatan2WithCheck(IkReal(((-0.02017251125)+((cj1*x215*x217))+(((-1.0)*sj1*x214*x215))+((x211*x215))+((x211*x212))+(((0.010155145)*sj3))+((sj1*x210))+(((0.14203)*x213))+(((-1.0)*x217*x220))+(((-1.0)*x213*x214))+((cj1*x212*x217))+(((-1.0)*x212*x219))+(((-0.003449875)*cj3))+(((-1.0)*sj1*x212*x214))+(((-1.0)*x215*x219)))),IkReal(((0.006852975906)+((sj1*x215*x217))+(((-1.0)*cj1*x210))+((x213*x217))+(((-0.003449875)*sj3))+(((-0.010155145)*cj3))+(((-1.0)*x214*x220))+((pz*x211))+((cj1*x212*x214))+(((-1.0)*x212*x218))+(((-1.0)*x212*x216))+((sj1*x212*x217))+((cj1*x214*x215))+(((-1.0)*x215*x216))+(((-1.0)*x215*x218)))),IKFAST_ATAN2_MAGTHRESH);
if(!x223.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x222.value)))+(x223.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x224=IKcos(j2);
IkReal x225=IKsin(j2);
IkReal x226=(px*sj1);
IkReal x227=(py*sj1);
IkReal x228=(cj1*sj0);
IkReal x229=((1.0)*px);
IkReal x230=(pz*r00);
IkReal x231=((1.0)*r01);
IkReal x232=(cj0*r01);
IkReal x233=(pz*sj1);
IkReal x234=(r00*sj0);
IkReal x235=(cj0*cj1);
IkReal x236=((0.14203)*x225);
IkReal x237=((2.0e-7)*x224);
IkReal x238=((2.0e-7)*x225);
IkReal x239=((0.14203)*x224);
IkReal x240=((0.0715)*x225);
IkReal x241=((0.0715)*x224);
IkReal x242=(cj3*x241);
IkReal x243=(sj3*x240);
IkReal x244=(sj3*x241);
IkReal x245=(cj3*x240);
IkReal x246=(x238+x239);
IkReal x247=(x237+x243);
IkReal x248=(x236+x242);
IkReal x249=(x245+x244);
evalcond[0]=((-0.14203)+((sj0*x227))+((cj1*pz))+((cj0*x226))+x248+(((-1.0)*x247)));
evalcond[1]=((0.04825)+x233+x246+(((-1.0)*py*x228))+(((-1.0)*x249))+(((-1.0)*x229*x235)));
evalcond[2]=((((0.14203)*x232))+((x228*x230))+((r00*x227))+x248+(((-1.0)*x226*x231))+(((-1.0)*x247))+(((-1.0)*r02*x228*x229))+(((-1.0)*pz*x231*x235))+((py*r02*x235))+(((-0.14203)*x234)));
evalcond[3]=(((x232*x233))+(((0.04825)*x232))+(((-1.0)*cj1*r01*x229))+((cj1*py*r00))+x249+((r02*sj0*x226))+(((-1.0)*sj0*sj1*x230))+(((-1.0)*x246))+(((-1.0)*cj0*r02*x227))+(((-0.04825)*x234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-884082.898602797)+cj3+(((710150.0)*sj3)));
j2eval[1]=IKsign(((-0.02528477090004)+(((2.86e-8)*cj3))+(((0.02031029)*sj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x250=((2.0e-7)*pz);
IkReal x251=((0.14203)*sj1);
IkReal x252=(py*sj0);
IkReal x253=(cj1*pz);
IkReal x254=((0.0715)*sj3);
IkReal x255=(cj0*px);
IkReal x256=((2.0e-7)*sj1);
IkReal x257=((0.0715)*cj3);
IkReal x258=((0.14203)*cj1);
IkReal x259=((2.0e-7)*cj1);
IkReal x260=(pz*sj1);
IkReal x261=((0.0715)*sj1*x255);
CheckValue<IkReal> x262=IKPowWithIntegerCheck(IKsign(((-0.02528477090004)+(((2.86e-8)*cj3))+(((0.02031029)*sj3)))),-1);
if(!x262.valid){
continue;
}
CheckValue<IkReal> x263 = IKatan2WithCheck(IkReal(((-0.02017251125)+(((-1.0)*x252*x259))+((cj1*x255*x257))+(((-1.0)*x255*x259))+((x251*x255))+((x251*x252))+((sj1*x250))+(((0.010155145)*sj3))+(((-1.0)*sj1*x254*x255))+((cj1*x252*x257))+(((0.14203)*x253))+(((-1.0)*sj1*x252*x254))+(((-0.003449875)*cj3))+(((-1.0)*x253*x254))+(((-1.0)*x257*x260)))),IkReal(((0.006852975906)+(((-1.0)*x252*x256))+(((-1.0)*x252*x258))+((sj1*x252*x257))+(((-0.003449875)*sj3))+(((-0.010155145)*cj3))+(((-1.0)*x255*x256))+(((-1.0)*x255*x258))+((pz*x251))+((sj1*x255*x257))+((cj1*x252*x254))+((x253*x257))+(((-1.0)*cj1*x250))+((cj1*x254*x255))+(((-1.0)*x254*x260)))),IKFAST_ATAN2_MAGTHRESH);
if(!x263.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x262.value)))+(x263.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x264=IKcos(j2);
IkReal x265=IKsin(j2);
IkReal x266=(px*sj1);
IkReal x267=(py*sj1);
IkReal x268=(cj1*sj0);
IkReal x269=((1.0)*px);
IkReal x270=(pz*r00);
IkReal x271=((1.0)*r01);
IkReal x272=(cj0*r01);
IkReal x273=(pz*sj1);
IkReal x274=(r00*sj0);
IkReal x275=(cj0*cj1);
IkReal x276=((2.0e-7)*x264);
IkReal x277=((0.14203)*x265);
IkReal x278=((2.0e-7)*x265);
IkReal x279=((0.14203)*x264);
IkReal x280=((0.0715)*x265);
IkReal x281=((0.0715)*x264);
IkReal x282=(sj3*x280);
IkReal x283=(cj3*x281);
IkReal x284=(sj3*x281);
IkReal x285=(cj3*x280);
IkReal x286=(x278+x279);
IkReal x287=(x276+x282);
IkReal x288=(x277+x283);
IkReal x289=(x285+x284);
evalcond[0]=((-0.14203)+((cj0*x266))+((cj1*pz))+x288+(((-1.0)*x287))+((sj0*x267)));
evalcond[1]=((0.04825)+(((-1.0)*py*x268))+(((-1.0)*x269*x275))+x273+x286+(((-1.0)*x289)));
evalcond[2]=((((-1.0)*pz*x271*x275))+x287+((py*r02*x275))+(((-0.14203)*x274))+(((0.14203)*x272))+((r00*x267))+(((-1.0)*x288))+(((-1.0)*x266*x271))+(((-1.0)*r02*x268*x269))+((x268*x270)));
evalcond[3]=(((x272*x273))+(((-1.0)*sj0*sj1*x270))+(((-0.04825)*x274))+((r02*sj0*x266))+((cj1*py*r00))+x286+(((-1.0)*cj1*r01*x269))+(((-1.0)*cj0*r02*x267))+(((0.04825)*x272))+(((-1.0)*x289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x290=((0.0715)*cj3);
IkReal x291=((0.0715)*sj3);
IkReal x292=(cj0*sj1);
IkReal x293=(cj1*r02);
IkReal x294=(cj4*sj3);
IkReal x295=(cj1*pz);
IkReal x296=(cj3*cj4);
IkReal x297=((0.14203)*x294);
IkReal x298=(r01*sj0*sj1);
IkReal x299=((1.0)*x296);
IkReal x300=(py*sj0*sj1);
CheckValue<IkReal> x301=IKPowWithIntegerCheck(IKsign(((((-2.0e-7)*x296))+(((-1.0)*x297))+(((0.0715)*cj4)))),-1);
if(!x301.valid){
continue;
}
CheckValue<IkReal> x302 = IKatan2WithCheck(IkReal(((((-1.0)*x290*x298))+(((-1.0)*x290*x293))+(((2.0e-7)*x293))+(((2.0e-7)*x298))+(((-1.0)*x297))+(((2.0e-7)*r00*x292))+((px*x292*x294))+((x294*x300))+(((-1.0)*r00*x290*x292))+((x294*x295)))),IkReal(((((-1.0)*r00*x291*x292))+(((0.14203)*x298))+(((0.14203)*x296))+(((0.14203)*x293))+(((-1.0)*x291*x293))+(((-1.0)*x291*x298))+(((-1.0)*px*x292*x299))+(((-1.0)*x299*x300))+(((-1.0)*x295*x299))+(((0.14203)*r00*x292)))),IKFAST_ATAN2_MAGTHRESH);
if(!x302.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x301.value)))+(x302.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x303=IKcos(j2);
IkReal x304=IKsin(j2);
IkReal x305=py*py;
IkReal x306=px*px;
IkReal x307=pz*pz;
IkReal x308=(r01*sj0);
IkReal x309=(py*sj1);
IkReal x310=((1.0)*cj1);
IkReal x311=((0.0715)*sj4);
IkReal x312=((5.6812e-8)*cj4);
IkReal x313=((1.0)*sj1);
IkReal x314=(cj0*r00);
IkReal x315=(py*sj0);
IkReal x316=((0.0965)*r02);
IkReal x317=((2.0)*pz);
IkReal x318=(cj0*sj1);
IkReal x319=(pz*r01);
IkReal x320=(px*r01);
IkReal x321=((0.28406)*r02);
IkReal x322=(cj1*r02);
IkReal x323=(cj0*py);
IkReal x324=(r02*sj1);
IkReal x325=(px*sj0);
IkReal x326=((0.0178444584)*sj1);
IkReal x327=((0.02528477089996)*cj4);
IkReal x328=((0.013705895)*sj1);
IkReal x329=(cj1*py);
IkReal x330=((0.0965)*pz);
IkReal x331=((0.01506027089996)*cj4);
IkReal x332=((0.013705895)*cj1);
IkReal x333=((0.0178444584)*cj1);
IkReal x334=(px*r00);
IkReal x335=(py*r01);
IkReal x336=(r00*sj0);
IkReal x337=((0.28406)*pz);
IkReal x338=(cj0*r01);
IkReal x339=(cj3*x304);
IkReal x340=(cj0*px*r02);
IkReal x341=(pz*x336);
IkReal x342=(cj3*x303);
IkReal x343=(sj4*x304);
IkReal x344=(cj1*x334);
IkReal x345=(sj3*x303);
IkReal x346=((2.0e-7)*x303);
IkReal x347=(sj3*x304);
IkReal x348=(cj4*x303);
IkReal x349=(cj4*x304);
IkReal x350=(sj1*x307);
IkReal x351=((0.14203)*x303);
IkReal x352=(r02*x307);
evalcond[0]=(((sj1*x314))+x322+((cj4*x345))+((cj4*x339))+((sj1*x308)));
evalcond[1]=((((-1.0)*x310*x314))+(((-1.0)*x308*x310))+x324+((cj4*x342))+(((-1.0)*cj4*x347)));
evalcond[2]=((-0.14203)+(((0.0715)*x342))+((cj1*pz))+(((-0.0715)*x347))+((px*x318))+((sj0*x309))+(((-1.0)*x346))+(((0.14203)*x304)));
evalcond[3]=((0.04825)+(((-1.0)*x310*x315))+(((-0.0715)*x339))+x351+(((-0.0715)*x345))+(((2.0e-7)*x304))+((pz*sj1))+(((-1.0)*cj0*px*x310)));
evalcond[4]=(((x322*x323))+((x311*x342))+(((-0.14203)*x336))+((cj1*x341))+(((-1.0)*x311*x347))+(((-1.0)*cj0*x310*x319))+(((-1.0)*sj4*x346))+(((-1.0)*x313*x320))+(((0.14203)*x343))+((r00*x309))+(((-1.0)*r02*x310*x325))+(((0.14203)*x338)));
evalcond[5]=((((-2.0e-7)*x343))+(((0.04825)*x338))+(((-0.04825)*x336))+((r00*x329))+((x311*x345))+((x311*x339))+(((-1.0)*cj0*r02*x309))+((x324*x325))+(((-1.0)*x310*x320))+(((-1.0)*sj4*x351))+((x318*x319))+(((-1.0)*x313*x341)));
evalcond[6]=((((-1.0)*sj1*x317*x334))+(((2.0)*x315*x344))+(((-1.0)*x306*x308*x310))+(((-2.86e-8)*x348))+((cj1*x306*x314))+((x308*x328))+(((-1.0)*x331*x342))+(((-1.0)*x307*x310*x314))+((x315*x317*x322))+(((-1.0)*cj0*px*x321))+(((-1.0)*x308*x333))+((x305*x324))+(((-1.0)*x315*x321))+(((0.02031029)*x349))+((cj0*px*x317*x322))+(((-1.0)*x327*x347))+((x308*x337))+(((0.0178444584)*x324))+((x312*x345))+(((-0.0965)*x334))+(((-0.0965)*x335))+((x314*x328))+(((-1.0)*pz*x316))+((x314*x337))+(((-1.0)*x313*x352))+(((-1.0)*x314*x333))+(((-1.0)*r01*x309*x317))+(((-1.0)*x307*x308*x310))+(((-1.0)*x305*x310*x314))+((cj1*x305*x308))+(((2.0)*cj1*x320*x323))+((x306*x324))+(((-1.0)*x312*x339))+(((0.013705895)*x322)));
evalcond[7]=(((x327*x345))+(((-1.0)*x317*x344))+((x308*x350))+(((-1.0)*x314*x326))+(((-2.86e-8)*x349))+(((-1.0)*x306*x313*x314))+(((-1.0)*x308*x332))+((x305*x322))+((pz*x321))+(((-1.0)*px*r02*x317*x318))+(((0.28406)*x335))+(((0.28406)*x334))+((x308*x330))+(((-2.0)*cj0*x309*x320))+((x312*x342))+((x312*x347))+(((-0.0178444584)*x322))+((x314*x350))+(((-2.0)*r00*x309*x325))+(((-1.0)*x331*x339))+(((-1.0)*x315*x316))+((x314*x330))+(((-1.0)*x308*x326))+(((-0.02031029)*x348))+(((-1.0)*r01*x317*x329))+(((-1.0)*x314*x332))+(((-1.0)*cj0*px*x316))+(((-1.0)*x310*x352))+(((-1.0)*r02*sj0*x309*x317))+((x306*x322))+((sj1*x305*x314))+(((-1.0)*x305*x308*x313))+((sj1*x306*x308))+(((0.013705895)*x324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x353=((0.04825)*cj4);
IkReal x354=((0.0715)*cj3);
IkReal x355=((0.0715)*sj3);
IkReal x356=(cj4*sj3);
IkReal x357=(pz*sj1);
IkReal x358=(cj1*r02);
IkReal x359=(cj3*cj4);
IkReal x360=(r01*sj0*sj1);
IkReal x361=(cj0*r00*sj1);
IkReal x362=(cj0*cj1*px);
IkReal x363=(cj1*py*sj0);
CheckValue<IkReal> x364=IKPowWithIntegerCheck(IKsign(((((-2.0e-7)*x356))+(((0.14203)*x359)))),-1);
if(!x364.valid){
continue;
}
CheckValue<IkReal> x365 = IKatan2WithCheck(IkReal((((x356*x357))+(((-1.0)*x356*x363))+(((-1.0)*x356*x362))+((x355*x358))+((x355*x361))+((x355*x360))+((sj3*x353))+(((-0.14203)*x360))+(((-0.14203)*x361))+(((-0.14203)*x358)))),IkReal(((((-1.0)*x354*x361))+(((-1.0)*x354*x360))+(((-1.0)*cj3*x353))+(((2.0e-7)*x361))+(((2.0e-7)*x360))+(((-1.0)*x357*x359))+((x359*x363))+((x359*x362))+(((-1.0)*x354*x358))+(((2.0e-7)*x358)))),IKFAST_ATAN2_MAGTHRESH);
if(!x365.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x364.value)))+(x365.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x366=IKcos(j2);
IkReal x367=IKsin(j2);
IkReal x368=py*py;
IkReal x369=px*px;
IkReal x370=pz*pz;
IkReal x371=(r01*sj0);
IkReal x372=(py*sj1);
IkReal x373=((1.0)*cj1);
IkReal x374=((0.0715)*sj4);
IkReal x375=((5.6812e-8)*cj4);
IkReal x376=((1.0)*sj1);
IkReal x377=(cj0*r00);
IkReal x378=(py*sj0);
IkReal x379=((0.0965)*r02);
IkReal x380=((2.0)*pz);
IkReal x381=(cj0*sj1);
IkReal x382=(pz*r01);
IkReal x383=(px*r01);
IkReal x384=((0.28406)*r02);
IkReal x385=(cj1*r02);
IkReal x386=(cj0*py);
IkReal x387=(r02*sj1);
IkReal x388=(px*sj0);
IkReal x389=((0.0178444584)*sj1);
IkReal x390=((0.02528477089996)*cj4);
IkReal x391=((0.013705895)*sj1);
IkReal x392=(cj1*py);
IkReal x393=((0.0965)*pz);
IkReal x394=((0.01506027089996)*cj4);
IkReal x395=((0.013705895)*cj1);
IkReal x396=((0.0178444584)*cj1);
IkReal x397=(px*r00);
IkReal x398=(py*r01);
IkReal x399=(r00*sj0);
IkReal x400=((0.28406)*pz);
IkReal x401=(cj0*r01);
IkReal x402=(cj3*x367);
IkReal x403=(cj0*px*r02);
IkReal x404=(pz*x399);
IkReal x405=(cj3*x366);
IkReal x406=(sj4*x367);
IkReal x407=(cj1*x397);
IkReal x408=(sj3*x366);
IkReal x409=((2.0e-7)*x366);
IkReal x410=(sj3*x367);
IkReal x411=(cj4*x366);
IkReal x412=(cj4*x367);
IkReal x413=(sj1*x370);
IkReal x414=((0.14203)*x366);
IkReal x415=(r02*x370);
evalcond[0]=(((sj1*x371))+((sj1*x377))+((cj4*x408))+((cj4*x402))+x385);
evalcond[1]=(((cj4*x405))+x387+(((-1.0)*x373*x377))+(((-1.0)*x371*x373))+(((-1.0)*cj4*x410)));
evalcond[2]=((-0.14203)+((px*x381))+(((0.0715)*x405))+((sj0*x372))+(((0.14203)*x367))+((cj1*pz))+(((-1.0)*x409))+(((-0.0715)*x410)));
evalcond[3]=((0.04825)+(((-0.0715)*x408))+(((-0.0715)*x402))+(((-1.0)*cj0*px*x373))+(((2.0e-7)*x367))+x414+(((-1.0)*x373*x378))+((pz*sj1)));
evalcond[4]=((((0.14203)*x406))+(((0.14203)*x401))+((r00*x372))+(((-1.0)*x374*x410))+(((-1.0)*x376*x383))+(((-1.0)*cj0*x373*x382))+((x374*x405))+(((-1.0)*sj4*x409))+((x385*x386))+(((-0.14203)*x399))+((cj1*x404))+(((-1.0)*r02*x373*x388)));
evalcond[5]=((((-1.0)*x373*x383))+((x387*x388))+((r00*x392))+((x374*x402))+((x374*x408))+(((-1.0)*sj4*x414))+(((0.04825)*x401))+(((-1.0)*cj0*r02*x372))+(((-2.0e-7)*x406))+(((-1.0)*x376*x404))+((x381*x382))+(((-0.04825)*x399)));
evalcond[6]=((((2.0)*cj1*x383*x386))+(((-1.0)*x390*x410))+(((-1.0)*r01*x372*x380))+(((-0.0965)*x397))+(((-0.0965)*x398))+((x377*x400))+((x371*x391))+(((-1.0)*x368*x373*x377))+(((0.013705895)*x385))+((x378*x380*x385))+(((-1.0)*x377*x396))+(((-1.0)*x370*x371*x373))+(((-2.86e-8)*x411))+((x368*x387))+(((-1.0)*sj1*x380*x397))+(((-1.0)*x394*x405))+(((0.0178444584)*x387))+(((-1.0)*x371*x396))+((x377*x391))+((cj1*x369*x377))+((x371*x400))+((cj1*x368*x371))+(((-1.0)*pz*x379))+((cj0*px*x380*x385))+(((-1.0)*x378*x384))+(((-1.0)*x370*x373*x377))+((x375*x408))+((x369*x387))+(((2.0)*x378*x407))+(((-1.0)*x376*x415))+(((-1.0)*cj0*px*x384))+(((-1.0)*x375*x402))+(((-1.0)*x369*x371*x373))+(((0.02031029)*x412)));
evalcond[7]=(((x371*x393))+(((-1.0)*x373*x415))+(((0.013705895)*x387))+((x390*x408))+(((-1.0)*x380*x407))+(((-1.0)*cj0*px*x379))+(((-1.0)*r01*x380*x392))+(((-1.0)*x377*x395))+(((-1.0)*x378*x379))+(((-2.86e-8)*x412))+((sj1*x369*x371))+((x368*x385))+(((-1.0)*x394*x402))+((x371*x413))+(((-1.0)*x368*x371*x376))+(((-1.0)*x371*x395))+(((-2.0)*cj0*x372*x383))+((x377*x393))+(((-2.0)*r00*x372*x388))+(((-0.02031029)*x411))+(((-1.0)*x369*x376*x377))+(((-1.0)*px*r02*x380*x381))+(((-1.0)*r02*sj0*x372*x380))+(((-0.0178444584)*x385))+((x375*x405))+((pz*x384))+(((-1.0)*x377*x389))+(((-1.0)*x371*x389))+((sj1*x368*x377))+((x375*x410))+((x369*x385))+(((0.28406)*x397))+(((0.28406)*x398))+((x377*x413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x416=((1.0)*sj1);
IkReal x417=((1.0)*sj3);
IkReal x418=(cj3*r02);
IkReal x419=(r01*sj0);
IkReal x420=(cj0*r00);
IkReal x421=(cj3*x419);
IkReal x422=(cj1*x420);
CheckValue<IkReal> x423 = IKatan2WithCheck(IkReal(((((-1.0)*x416*x421))+(((-1.0)*cj1*x418))+(((-1.0)*cj3*x416*x420))+(((-1.0)*cj1*x417*x419))+(((-1.0)*x417*x422))+((r02*sj1*sj3)))),IkReal(((((-1.0)*sj3*x416*x419))+(((-1.0)*sj3*x416*x420))+(((-1.0)*x416*x418))+((cj3*x422))+(((-1.0)*cj1*r02*x417))+((cj1*x421)))),IKFAST_ATAN2_MAGTHRESH);
if(!x423.valid){
continue;
}
CheckValue<IkReal> x424=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x424.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x423.value)+(((1.5707963267949)*(x424.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x425=IKcos(j2);
IkReal x426=IKsin(j2);
IkReal x427=py*py;
IkReal x428=px*px;
IkReal x429=pz*pz;
IkReal x430=(r01*sj0);
IkReal x431=(py*sj1);
IkReal x432=((1.0)*cj1);
IkReal x433=((0.0715)*sj4);
IkReal x434=((5.6812e-8)*cj4);
IkReal x435=((1.0)*sj1);
IkReal x436=(cj0*r00);
IkReal x437=(py*sj0);
IkReal x438=((0.0965)*r02);
IkReal x439=((2.0)*pz);
IkReal x440=(cj0*sj1);
IkReal x441=(pz*r01);
IkReal x442=(px*r01);
IkReal x443=((0.28406)*r02);
IkReal x444=(cj1*r02);
IkReal x445=(cj0*py);
IkReal x446=(r02*sj1);
IkReal x447=(px*sj0);
IkReal x448=((0.0178444584)*sj1);
IkReal x449=((0.02528477089996)*cj4);
IkReal x450=((0.013705895)*sj1);
IkReal x451=(cj1*py);
IkReal x452=((0.0965)*pz);
IkReal x453=((0.01506027089996)*cj4);
IkReal x454=((0.013705895)*cj1);
IkReal x455=((0.0178444584)*cj1);
IkReal x456=(px*r00);
IkReal x457=(py*r01);
IkReal x458=(r00*sj0);
IkReal x459=((0.28406)*pz);
IkReal x460=(cj0*r01);
IkReal x461=(cj3*x426);
IkReal x462=(cj0*px*r02);
IkReal x463=(pz*x458);
IkReal x464=(cj3*x425);
IkReal x465=(sj4*x426);
IkReal x466=(cj1*x456);
IkReal x467=(sj3*x425);
IkReal x468=((2.0e-7)*x425);
IkReal x469=(sj3*x426);
IkReal x470=(cj4*x425);
IkReal x471=(cj4*x426);
IkReal x472=(sj1*x429);
IkReal x473=((0.14203)*x425);
IkReal x474=(r02*x429);
evalcond[0]=(((cj4*x461))+((cj4*x467))+x444+((sj1*x436))+((sj1*x430)));
evalcond[1]=((((-1.0)*x430*x432))+((cj4*x464))+(((-1.0)*x432*x436))+(((-1.0)*cj4*x469))+x446);
evalcond[2]=((-0.14203)+((sj0*x431))+((px*x440))+(((-1.0)*x468))+(((-0.0715)*x469))+((cj1*pz))+(((0.14203)*x426))+(((0.0715)*x464)));
evalcond[3]=((0.04825)+(((-1.0)*x432*x437))+(((-0.0715)*x461))+(((-0.0715)*x467))+x473+(((2.0e-7)*x426))+((pz*sj1))+(((-1.0)*cj0*px*x432)));
evalcond[4]=((((-1.0)*sj4*x468))+(((-1.0)*x435*x442))+((x433*x464))+((cj1*x463))+(((0.14203)*x465))+(((0.14203)*x460))+(((-1.0)*cj0*x432*x441))+((x444*x445))+((r00*x431))+(((-1.0)*x433*x469))+(((-1.0)*r02*x432*x447))+(((-0.14203)*x458)));
evalcond[5]=((((-0.04825)*x458))+((x446*x447))+(((-2.0e-7)*x465))+(((-1.0)*x435*x463))+(((-1.0)*sj4*x473))+(((-1.0)*x432*x442))+((x433*x467))+((x433*x461))+(((-1.0)*cj0*r02*x431))+(((0.04825)*x460))+((x440*x441))+((r00*x451)));
evalcond[6]=((((-1.0)*x437*x443))+(((-1.0)*cj0*px*x443))+(((-1.0)*x429*x432*x436))+(((-1.0)*r01*x431*x439))+(((-1.0)*x428*x430*x432))+((x428*x446))+(((2.0)*x437*x466))+(((0.02031029)*x471))+(((-1.0)*x429*x430*x432))+(((0.013705895)*x444))+(((2.0)*cj1*x442*x445))+((x430*x450))+((x430*x459))+(((-1.0)*sj1*x439*x456))+(((-0.0965)*x457))+(((-0.0965)*x456))+(((-1.0)*x436*x455))+(((-1.0)*x453*x464))+((x437*x439*x444))+(((-1.0)*pz*x438))+(((0.0178444584)*x446))+(((-2.86e-8)*x470))+((x434*x467))+((cj1*x427*x430))+(((-1.0)*x449*x469))+(((-1.0)*x435*x474))+(((-1.0)*x430*x455))+(((-1.0)*x434*x461))+((x427*x446))+((cj1*x428*x436))+((cj0*px*x439*x444))+((x436*x459))+((x436*x450))+(((-1.0)*x427*x432*x436)));
evalcond[7]=(((sj1*x427*x436))+(((-1.0)*x437*x438))+(((-1.0)*x430*x448))+(((-0.02031029)*x470))+(((-1.0)*px*r02*x439*x440))+(((-1.0)*x427*x430*x435))+(((-1.0)*x439*x466))+(((0.28406)*x456))+(((0.28406)*x457))+(((-0.0178444584)*x444))+((x430*x472))+((x428*x444))+(((-2.0)*r00*x431*x447))+((pz*x443))+(((0.013705895)*x446))+((x430*x452))+(((-1.0)*x436*x448))+(((-1.0)*x436*x454))+(((-1.0)*x453*x461))+(((-1.0)*x432*x474))+((sj1*x428*x430))+(((-2.86e-8)*x471))+((x449*x467))+((x434*x464))+((x434*x469))+((x436*x472))+(((-1.0)*r02*sj0*x431*x439))+(((-1.0)*x428*x435*x436))+(((-2.0)*cj0*x431*x442))+(((-1.0)*x430*x454))+((x427*x444))+((x436*x452))+(((-1.0)*cj0*px*x438))+(((-1.0)*r01*x439*x451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
    }
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - widowx_arm (76fc2a54d5a12d8ed97c55c467364acd)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
